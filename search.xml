<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[2048，设计思路，以及一点感想]]></title>
      <url>http://ChunlLing.github.io.com/2017/06/17/2048%EF%BC%8C%E8%AE%BE%E8%AE%A1%E6%80%9D%E8%B7%AF%EF%BC%8C%E4%BB%A5%E5%8F%8A%E4%B8%80%E7%82%B9%E6%84%9F%E6%83%B3/</url>
      <content type="html"><![CDATA[<p>在网上看了别人的代码，写得挺浅显易懂的，自己整合了下思路，重新写了一个，目前还是普通版，后续有时间再改造下游戏模式 😊<br>
体验室传送门：<a href="https://chunlling.github.io/2048/" target="_blank" rel="external">2048</a><br>
代码仓库传送门：<a href="https://github.com/ChunlLing/2048" target="_blank" rel="external">源码</a></p>
<hr>
<h1 id="游戏逻辑">游戏逻辑</h1>
<p>设置按键事件监听，根据<code>keyCode</code>判断移动方向。（截取部分代码分析，【】内标记问题在代码段后解释）</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">move: function (direct) &#123;	<span class="comment">// direct为移动方向，1：左；2：右；3：上；4：下</span></div><div class="line">	<span class="keyword">this</span>.direct = direct;	</div><div class="line">	<span class="keyword">var</span> oldData, newData;	<span class="comment">// oldData, newData分别保存移动前和移动后的数据信息</span></div><div class="line">	oldData = <span class="keyword">this</span>.<span class="keyword">data</span>.toString();</div><div class="line">	switch (<span class="keyword">this</span>.direct) &#123;</div><div class="line">		case <span class="number">1</span>:				<span class="comment">// 按下左方向键</span></div><div class="line">			<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.rowNum; i++) &#123;	<span class="comment">// 遍历各行【问题1】</span></div><div class="line">				<span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="keyword">this</span>.colNum<span class="number">-1</span>; j++) &#123;	<span class="comment">// 遍历除最后一列的所有列【问题2】</span></div><div class="line">					<span class="keyword">var</span> nextNotNull = <span class="keyword">this</span>.getNextNum(i, j);	<span class="comment">// 获得当前被访问元素后不为0的数的列下标，该数不存在时返回-1【问题3】</span></div><div class="line">					<span class="keyword">if</span> (nextNotNull == <span class="number">-1</span>) &#123;	<span class="comment">// 该数不存在，跳出循环【问题4】</span></div><div class="line">						<span class="keyword">break</span>;</div><div class="line">					&#125; <span class="keyword">else</span> &#123;	<span class="comment">// 该数存在</span></div><div class="line">						<span class="keyword">if</span> (<span class="keyword">this</span>.<span class="keyword">data</span>[i][j] == <span class="number">0</span>) &#123;	<span class="comment">// 如果当前被访问元素的值为0</span></div><div class="line">							<span class="keyword">this</span>.<span class="keyword">data</span>[i][j] = <span class="keyword">this</span>.<span class="keyword">data</span>[i][nextNotNull];	<span class="comment">// 将当前被访问元素后不为0的数赋给当前被访问元素</span></div><div class="line">							<span class="keyword">this</span>.<span class="keyword">data</span>[i][nextNotNull] = <span class="number">0</span>;	<span class="comment">// 清除当前被访问元素后不为0的数</span></div><div class="line">							j--;	<span class="comment">// 【问题5】</span></div><div class="line">						&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.<span class="keyword">data</span>[i][nextNotNull] == <span class="keyword">this</span>.<span class="keyword">data</span>[i][j]) &#123;</div><div class="line">							<span class="keyword">this</span>.changeData(i,j,nextNotNull);	<span class="comment">// 【问题6】</span></div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		case <span class="number">2</span>:</div><div class="line">           	<span class="comment">// 代码省略，与1的区别在于在第二轮循环内，获得当前被访问元素后不为0的数的列下标从当前被访问元素开始向前搜索</span></div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		case <span class="number">3</span>:</div><div class="line">           	<span class="comment">// 代码省略，与1的区别在于在第一轮循环为列，第二轮为行</span></div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		case <span class="number">4</span>:</div><div class="line">           	<span class="comment">// 代码省略，与3的区别在于在第二轮循环内，获得当前被访问元素后不为0的数的行下标从当前被访问元素开始向前搜索</span></div><div class="line">			<span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line">	newData = <span class="keyword">this</span>.<span class="keyword">data</span>.toString();</div><div class="line">	<span class="keyword">if</span> (newData != oldData) &#123;	<span class="comment">// 判断当前方向的所有方块是否可移动</span></div><div class="line">		<span class="keyword">this</span>.randomNum();	<span class="comment">// 随机产生一个新的方块</span></div><div class="line">		<span class="keyword">this</span>.updateView();	<span class="comment">// 更新视图【问题6】</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>【问题1】</p>
<ul>
<li>A: 水平方向（按下左右键）先遍历行再遍历列，垂直方向（按下上下方向键）先遍历列再遍历行。对水平方向的移动而言，列与列之间的数据相互影响，而不同行的列数据不影响</li>
</ul>
<p>【问题2】为什么不遍历所有列？</p>
<ul>
<li>A: 可以选择遍历所有列，但不都进行遍历更好。在后面的步骤中有求当前遍历元素后不为0的数的下标的算法，该算法能访问到最后一个元素。</li>
</ul>
<p>【问题3】getNextNum()方法？</p>
<ul>
<li>A: 返回当前被访问元素后不为0的数的列下标，若无满足条件的数返回-1.</li>
</ul>
<p>【问题4】能否省略nextNotNull == -1的判断</p>
<ul>
<li>A: 可以。在for循环中break的作用是跳出循环，若该判断为真，可知当前遍历元素不会和后面的数字进行计算，因而直接跳出循环效果更好。</li>
</ul>
<p>【问题5】j–？</p>
<ul>
<li>A: 若能进行到此步，说明该位置原先的数值为0，现被后面第一个不为0的数取代，即该位置上的数并没有与后面的数计算过，因而需要重新访问此位置。</li>
</ul>
<p>【问题6】changeData()方法？</p>
<ul>
<li>A: 若能进行到此步，说明该位置原先的数值与后面第一个不为0的数值相等，即该数被计算了一次。</li>
</ul>
<hr>
<h1 id="游戏设计">游戏设计</h1>
<p>明天再更咯~ 😴</p>
]]></content>
      
        
        <tags>
            
            <tag> HTML </tag>
            
            <tag> JS </tag>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTML5学习笔记]]></title>
      <url>http://ChunlLing.github.io.com/2017/05/27/HTML5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h1 id="新元素">新元素</h1>
<table>
	<tr>
    	<th>标签</th>
        <th>描述</th>
        <th>分类</th>
    </tr>
	<tr>
    	<td><a href="http://www.runoob.com/html/html5-canvas.html" target="_blank" rel="external">&lt;canvas&gt;</a></td>
        <td>定义图形，基于JavaScript的绘图API</td>
        <td></td>
    </tr>
	<tr>
    	<td><a href="http://www.runoob.com/html/html5-audio.html" target="_blank" rel="external">&lt;audio&gt;</a></td>
        <td>音频</td>
        <td>多媒体</td>
    </tr>
	<tr>
    	<td><a href="http://www.runoob.com/html/html5-video.html" target="_blank" rel="external">&lt;video&gt;</a></td>
        <td>视频</td>
        <td>多媒体</td>
    </tr>
	<tr>
    	<td><a href="http://www.runoob.com/tags/tag-source.html" target="_blank" rel="external">&lt;source&gt;</a></td>
        <td>定义多媒体资源&lt;audio&gt;和&lt;video&gt;</td>
        <td>多媒体</td>
    </tr>
    <tr>
    	<td><a href="http://www.runoob.com/tags/tag-embed.html" target="_blank" rel="external">&lt;embed&gt;</a></td>
        <td>定于嵌入的内容</td>
        <td>多媒体</td>
    </tr>
	<tr>
    	<td><a href="http://www.runoob.com/tags/tag-track.html" target="_blank" rel="external">&lt;track&gt;</a></td>
        <td>为诸如&lt;audio&gt;和&lt;video&gt;元素之类媒介规定外部文本轨道</td>
        <td>多媒体</td>
    </tr>
	<tr>
    	<td><a href="http://www.runoob.com/tags/tag-datalist.html" target="_blank" rel="external">&lt;datalist&gt;</a></td>
        <td>定义选项列表。配合&lt;input&gt;使用</td>
        <td>表单</td>
    </tr>
	<tr>
    	<td><a href="http://www.runoob.com/tags/tag-keygen.html" target="_blank" rel="external">&lt;keygen&gt;</a></td>
        <td>规定用于表单的密钥对生成器字段</td>
        <td>表单</td>
    </tr>
	<tr>
    	<td><a href="http://www.runoob.com/tags/tag-output.html" target="_blank" rel="external">&lt;output&gt;</a></td>
        <td>定义不同类型的输出，如脚本的输出</td>
        <td>表单</td>
    </tr>
	<tr>
    	<td><a href="http://www.runoob.com/tags/tag-article.html" target="_blank" rel="external">&lt;article&gt;</a></td>
        <td>定义页面独立的内容区域</td>
        <td></td>
    </tr>
	<tr>
    	<td><a href="http://www.runoob.com/tags/tag-details.html" target="_blank" rel="external">&lt;details&gt;</a></td>
        <td>用于描述文档或文档某个部分的细节</td>
        <td>与 &lt;summary&gt; 标签配合使用可以为 details 定义标题。标题是可见的，用户点击标题时，会显示出 details</td>
    </tr>
	<tr>
    	<td><a href="http://www.runoob.com/tags/tag-summary.html" target="_blank" rel="external">&lt;summary&gt;</a></td>
        <td>标签包含 details 元素的标题</td>
        <td>&lt;summary&gt; 元素应该是 &lt;details&gt; 元素的第一个子元素</td>
    </tr>
	<tr>
    	<td><a href="http://www.runoob.com/tags/tag-figure.html" target="_blank" rel="external">&lt;figure&gt;</a></td>
        <td>规定独立的流内容（图像、图表、照片、代码等等）</td>
        <td>.</td>
    </tr>
	<tr>
    	<td><a href="http://www.runoob.com/tags/tag-figcaption.html" target="_blank" rel="external">&lt;figcaption&gt;</a></td>
        <td>定义 &lt;figure&gt; 元素的标题</td>
        <td>.</td>
    </tr>
	<tr>
    	<td><a href="http://www.runoob.com/tags/tag-header.html" target="_blank" rel="external">&lt;header&gt;</a></td>
        <td>定义了文档的头部区域</td>
        <td>.</td>
    </tr>
	<tr>
    	<td><a href="http://www.runoob.com/tags/tag-footer.html" target="_blank" rel="external">&lt;footer&gt;</a></td>
        <td>定义 section 或 document 的页脚</td>
        <td>.</td>
    </tr>
	<tr>
    	<td><a href="http://www.runoob.com/tags/tag-nav.html" target="_blank" rel="external">&lt;nav&gt;</a></td>
        <td>定义导航链接的部分</td>
        <td>.</td>
    </tr>
	<tr>
    	<td><a href="http://www.runoob.com/tags/tag-section.html" target="_blank" rel="external">&lt;section&gt;</a></td>
        <td>定义文档中的节</td>
        <td>.</td>
    </tr>
	<tr>
    	<td><a href="http://www.runoob.com/tags/tag-progress.html" target="_blank" rel="external">&lt;progress&gt;</a></td>
        <td>定义任何类型的任务的进度</td>
        <td>.</td>
    </tr>
	<tr>
    	<td><a href="http://www.runoob.com/tags/tag-meter.html" target="_blank" rel="external">&lt;meter&gt;</a></td>
        <td>定义度量衡。仅用于已知最大和最小值的度量</td>
        <td>.</td>
    </tr>
	<tr>
    	<td><a href="http://www.runoob.com/tags/tag-mark.html" target="_blank" rel="external">&lt;mark&gt;</a></td>
        <td>定义带有记号的文本</td>
        <td>.</td>
    </tr>
</table>
<hr>
<h1 id="关于表单">关于表单</h1>
<h2 id="lt-inputgt新类型">&lt; input&gt;新类型</h2>
<table>
	<tr>
    	<th>类型</th>
        <th>描述</th>
    </tr>
    <tr>
    	<td>email</td>
        <td>定义用于 e-mail 地址的文本字段</td>
    </tr>
    <tr>
    	<td>url</td>
        <td>定义用于 URL 的文本字段</td>
    </tr>
    <tr>
    	<td>tel</td>
        <td>定义用于电话号码的文本字段</td>
    </tr>
    <tr>
    	<td>number</td>
        <td>定义带有 spinner 控件的数字字段</td>
    </tr>
    <tr>
    	<td>range</td>
        <td>定义带有 slider 控件的数字字段</td>
    </tr>
    <tr>
    	<td>date</td>
        <td>定义日期字段</td>
    </tr>
    <tr>
    	<td>color</td>
        <td>定义拾色器</td>
    </tr>
</table>
<h2 id="表单新属性">表单新属性</h2>
<table>
	<tr>
    	<th>属性</th>
        <th>描述</th>
    </tr>
    <tr>
    	<td>placeholder</td>
        <td>提供可描述输入字段预期值的提示信息</td>
    </tr>
    <tr>
    	<td>multiple</td>
        <td>输入字段可选择多个值</td>
    </tr>
    <tr>
    	<td>autofocus</td>
        <td>规定当页面加载时 input 元素应该自动获得焦点</td>
    </tr>
    <tr>
    	<td>form</td>
        <td>声明元素属于某个表单（该元素的html可不在表单内），属性值为表单id</td>
    </tr>
    <tr>
    	<td>pattern</td>
        <td>用于验证输入字段的模式</td>
    </tr>
    <tr>
    	<td>min</td>
        <td>规定输入域允许的最小值</td>
    </tr>
    <tr>
    	<td>max</td>
        <td>规定输入域允许的最大值</td>
    </tr>
    <tr>
    	<td>step</td>
        <td>输入域规定合法的数字间隔</td>
    </tr>
    <tr>
    	<td>maxlength</td>
        <td>规定输入域允许的最大长度</td>
    </tr>
    <tr>
    	<td>mrequired</td>
        <td>规定输入域必填</td>
    </tr>
    <tr>
    	<td>list</td>
        <td>配合&lt;datalist&gt;使用，设置在&lt;input&gt;元素上，属性值为指定&lt;datalist&gt;的id</td>
    </tr>
</table>
<h2 id="表单验证api">表单验证API</h2>
<ol>
<li>获取表单DOM对象</li>
<li>通过1获得的对象的<code>validity</code>属性获得<code>validityState</code>对象</li>
</ol>
<p><code>validityState</code>对象对象有以下属性</p>
<ul>
<li><code>valid</code>：值为true表示表单控件通过了所有验证约束条件</li>
<li><code>valueMissind</code>：验证是否填写该字段，表单元素需设置<code>required</code></li>
<li><code>typeMismatch</code>：验证填写内容是否与表单元素的<code>type</code>属性一致</li>
<li><code>patternMismatch</code>：验证填写内容是否与表单元素的<code>pattern</code>属性一致</li>
<li><code>tooLong</code>：验证填写内容是否与表单元素的<code>maxLength</code>属性一致</li>
<li><code>rangeUnderflow</code>：验证填写内容是否与表单元素的<code>min</code>属性一致</li>
<li><code>rangeOverflow</code>：验证填写内容是否与表单元素的<code>max</code>属性一致</li>
<li><code>stepMismatch</code>：验证填写内容是否与表单元素的<code>step</code>属性符合</li>
<li><code>customError</code>：自定义验证消息。通过<code>setCustomValidity()</code>设置错误提示信息，值为true</li>
</ul>
<hr>
<h1 id="音视频">音视频</h1>
<h2 id="视频元素lt-videogt">视频元素&lt; video&gt;</h2>
<h3 id="使用">使用</h3>
<p>有两种方式，推荐第二种</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">"视频路径"</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">video</span>&gt;</span></div><div class="line">   	<span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"视频路径"</span> /&gt;</span></div><div class="line">   	<span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"视频路径"</span> /&gt;</span></div><div class="line">   	<span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"视频路径"</span> /&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">video</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="属性">属性</h3>
<ul>
<li><code>src</code>：属性值为视频路径</li>
<li><code>autoplay</code>：是否自动播放</li>
<li><code>cntrols</code>：是否显示控件</li>
<li><code>loop</code>：是否循环播放</li>
<li><code>poster</code>：指定在用户点击播放按钮前显示的图像</li>
<li><code>width</code>/<code>height</code>：视频显示的尺寸</li>
<li><code>preload</code>：设置是否预加载</li>
</ul>
<h3 id="api">API</h3>
<h4 id="方法">方法</h4>
<ul>
<li>play()：播放视频</li>
<li>pause()：暂停视频</li>
<li>load()：加载视频</li>
<li>canPlayType(type)：是否能播放type指定格式的视频</li>
</ul>
<h4 id="事件">事件</h4>
<ul>
<li>play：当视频播放时触发</li>
<li>pause：当视频暂停时触发</li>
<li>ended：当视频结束时触发</li>
<li>error：当视频错误时触发</li>
<li>canplay：不考虑整体情况下只要能播放视频就播放</li>
<li>canplaythrough：考虑整体情况下只要能播放视频就播放</li>
</ul>
<h4 id="属性">属性</h4>
<ul>
<li>src：获取或设置视频路径</li>
<li>played：读取媒体文件的已播放部分的时间段</li>
<li>paused：获取或设置是否暂停</li>
<li>ended：获取或设置是否结束</li>
<li>currentTime：获取或设置播放位置</li>
<li>duration：视频时长</li>
<li>progress：表示视频加载的进度</li>
</ul>
<hr>
<h1 id="画布">画布</h1>
<h2 id="使用">使用</h2>
<ol>
<li>在HTML中定义&lt;canvas&gt;</li>
<li>在JS脚本中获取&lt;canvas&gt;DOM对象</li>
<li>创建画布对象－－－getContext(‘2d’)</li>
<li>使用画布API绘图</li>
</ol>
<h2 id="绘图api">绘图API</h2>
<h3 id="设置">设置</h3>
<ul>
<li>fillStyle：设置填充色</li>
<li>strokeStyle：设置描边色</li>
<li>globalAlpha：设置透明度，值在0-1之间</li>
<li>设置渐变
<ul>
<li>createLinearGradient(x1, y1, x2, y2)：线性渐变</li>
<li>createRadiaGradient(x1, y1, r1, x2, y2, r2)：扇形渐变</li>
<li>addColorStop(point, color)：渐变点颜色</li>
</ul>
</li>
</ul>
<h3 id="绘图">绘图</h3>
<ul>
<li>fillRect(x, y, width, height)：实心矩形</li>
<li>strokeRect(x, y, width, height)：描边矩形</li>
<li>clearRect(x, y, width, height)： 清除指定区域</li>
</ul>
<h3 id="文字">文字</h3>
<ul>
<li>fillText(text, x, y)：实心文字</li>
<li>strokeText(text, x, y)：描边文字</li>
<li>textAlign：设置文字的水平方向对齐</li>
<li>textBaseline：设置文字的垂直方向对齐</li>
<li>阴影效果
<ul>
<li>shadowColor：设置阴影颜色</li>
<li>shadowOffsetX：设置水平方向阴影</li>
<li>shadowOffsetY：设置垂直方向阴影</li>
<li>shadowBlur：设置阴影模糊程度</li>
</ul>
</li>
</ul>
<h3 id="路径">路径</h3>
<ul>
<li>beginPath()：标志开始创建路径</li>
<li>closePath()：标志结束创建路径</li>
<li>rect(x, y, width, height)：设置矩形形状</li>
<li>arc(x, y, radius, startAngle, endAngle, direction)：设置圆形形状</li>
<li>绘制线条
<ul>
<li>moveTo(x, y)：线条起点</li>
<li>lineTo(x, y)：线条终点/折点</li>
<li>lineCap：设置线条端点的形状</li>
<li>lineJoin：设置两条线交点的形状</li>
<li>miterLimit：配合lineJoin使用</li>
</ul>
</li>
<li>fill()：绘制填充</li>
<li>stroke()：绘制描边</li>
<li>clip()：切割画布</li>
<li>绘制图片
<ol>
<li>
<p>加载图片</p>
 <figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> <span class="type">Image</span>();</div><div class="line">img.src = <span class="string">'图片路径'</span>;</div></pre></td></tr></table></figure>
</li>
<li>
<p>绘制图片。需保证图片已加载完毕才能进行绘图操作</p>
 <figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">img.onload = function () &#123;</div><div class="line">	画布对象.drawImage(img, x, y)<span class="comment">;</span></div><div class="line">    画布对象.drawImage(img, x, y, width, height)<span class="comment">;</span></div><div class="line">    </div><div class="line">    var ptn = 画布对象.createPattern(img. type)<span class="comment">;</span></div><div class="line">    画布对象. fillStyle = ptn<span class="comment">;</span></div><div class="line">    </div><div class="line">    ...</div><div class="line">&#125;<span class="comment">;</span></div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
<h3 id="画布方法">画布方法</h3>
<ul>
<li>scale(x, y)：缩放</li>
<li>translate(x, y)：重新定位</li>
<li>rotate(angle)：旋转画布。注意，效果是画布内容发生旋转而不是画布，所以视觉效果为画布内容发生相反方向的旋转</li>
</ul>
<h2 id="扩展-关于svg">扩展 关于SVG</h2>
<h3 id="图形">图形</h3>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">""</span> <span class="attr">y</span>=<span class="string">""</span> <span class="attr">width</span>=<span class="string">""</span> <span class="attr">height</span>=<span class="string">""</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">""</span> <span class="attr">cy</span>=<span class="string">""</span> <span class="attr">r</span>=<span class="string">""</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ellipse</span> <span class="attr">cx</span>=<span class="string">""</span> <span class="attr">cy</span>=<span class="string">""</span> <span class="attr">rx</span>=<span class="string">""</span> <span class="attr">ry</span>=<span class="string">""</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">""</span> <span class="attr">y1</span>=<span class="string">""</span> <span class="attr">x2</span>=<span class="string">""</span> <span class="attr">y2</span>=<span class="string">""</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">polyline</span> <span class="attr">points</span>=<span class="string">"x1,y1 x2,y2 ..."</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">polygon</span> <span class="attr">points</span>=<span class="string">"x1,y1 x2,y2 ..."</span> /&gt;</span></div></pre></td></tr></table></figure>
<h3 id="渐变">渐变</h3>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">defs</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">linearGradient</span> <span class="attr">x1</span>=<span class="string">""</span> <span class="attr">y1</span>=<span class="string">""</span> <span class="attr">x2</span>=<span class="string">""</span> <span class="attr">y2</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></div><div class="line">    	<span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">""</span> <span class="attr">stop-color</span>=<span class="string">""</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">linearGradient</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">radiaGradient</span>&gt;</span><span class="tag">&lt;/<span class="name">radiaGradient</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">defs</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="模糊">模糊</h3>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">defs</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">feGaussianBlur</span> <span class="attr">in</span>=<span class="string">"SourceGraphic"</span> <span class="attr">stdDeviation</span>=<span class="string">模糊程度</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">defs</span>&gt;</span></div></pre></td></tr></table></figure>
<hr>
<h1 id="拖拽">拖拽</h1>
<h2 id="源元素事件">源元素事件</h2>
<ul>
<li>dragstart：当鼠标开始拖放时被触发</li>
<li>drag：鼠标拖放过程</li>
<li>dragend：鼠标结束拖放触发</li>
</ul>
<h2 id="目标元素事件">目标元素事件</h2>
<ul>
<li>dragenter：当鼠标拖放进入到目标元素内被触发</li>
<li>dragover：当鼠标到达目标元素触发</li>
<li>drop：当鼠标实现拖放效果时被触发，需为dragover事件增加event.preventDefault()</li>
<li>dragleave：当鼠标离开目标元素时触发</li>
</ul>
<h2 id="datatransfer对象">dataTransfer对象</h2>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DataTransfer" target="_blank" rel="external">dataTransfer</a>：存储源元素信息</p>
<ul>
<li>setData(type, data)</li>
<li>getData(type)</li>
<li>clearData()</li>
</ul>
<hr>
<h1 id="地理定位">地理定位</h1>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">geoFindMe</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> (!navigator.geolocation) &#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">"Your browser doesn't support Geolocarion"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">success</span>(<span class="params">position</span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> latitude = position.coords.latitude;</div><div class="line">		<span class="keyword">var</span> longitude = position.coords.longitude;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'latitude: '</span> + latitude + <span class="string">' ; longitude : '</span> + longitude);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'error'</span>);</div><div class="line">	&#125;</div><div class="line">	navigator.geolocation.getCurrentPosition(success, error);</div><div class="line">&#125;</div><div class="line">geoFindMe();</div></pre></td></tr></table></figure>
<p><a href="https://developers.google.com/maps/documentation/javascript/tutorial?hl=zh-cn" target="_blank" rel="external">调用Google Maps API</a>
<a href="http://lbsyun.baidu.com/index.php?title=jspopular" target="_blank" rel="external">调用百度地图API</a></p>
<hr>
<h1 id="web-worker">Web Worker</h1>
<ol>
<li>创建Web Worker对象</li>
<li>为该对象绑定onmessage事件。通过event事件对象的data属性可以获取postMessage()方法传递的数据</li>
</ol>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">var</span> worker = <span class="literal">new</span> Worker(worker文件路径);</div><div class="line">worker.onmessage = function (event) &#123;</div><div class="line">	<span class="built_in">var</span> <span class="built_in">data</span> = event.<span class="built_in">data</span>;</div><div class="line">    <span class="params">...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// worker文件</span></div><div class="line"><span class="params">...</span></div><div class="line">postMessage(<span class="built_in">data</span>);</div><div class="line"><span class="params">...</span></div></pre></td></tr></table></figure>
<hr>
<h1 id="web存储">Web存储</h1>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API" target="_blank" rel="external">使用 WEB Storage API</a></p>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/sessionStorage" target="_blank" rel="external">sessionStorage</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/localStorage" target="_blank" rel="external">localStorage</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> HTML </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LESS学习笔记]]></title>
      <url>http://ChunlLing.github.io.com/2017/04/14/LESS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>前言：学而时习之不亦说乎<br>
其实是以前做的笔记不见了重新写~😤</p>
<h1 id="安装">安装</h1>
<h2 id="服务器端">服务器端</h2>
<p>通过npm（包管理器）安装</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm <span class="keyword">install</span> -g <span class="keyword">less</span></div></pre></td></tr></table></figure>
<h2 id="客户端">客户端</h2>
<p>在页面中引用</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet/less"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"文件.less"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"less.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>需要注意<code>&lt;link&gt;</code>的<code>rel</code>属性并且这个标签放在脚本文件之前，<a href="http://lesscss.org/?utm_source=caibaojian.com#download-options" target="_blank" rel="external"><code>less.js</code>下载</a></p>
<h1 id="用法">用法</h1>
<h2 id="变量">变量</h2>
<p>变量定义： <code>@变量名 : 值;</code></p>
<h2 id="混合">混合</h2>
<p>将一系列属性从一个规则集引入到另一个规则集中。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.border</span> &#123;</div><div class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#id</span> &#123;</div><div class="line">	.<span class="attribute">border</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="嵌套">嵌套</h2>
<p>可以在一个选择器中嵌套子选择器的样式。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#parent</span> &#123;</div><div class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</div><div class="line">    <span class="selector-id">#child</span> &#123;</div><div class="line">    	<span class="attribute">color</span>: <span class="number">#123</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-tag">a</span> &#123;</div><div class="line">    	&amp;:hover &#123;</div><div class="line">        	<span class="attribute">color</span>: <span class="number">#123</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意，<code>&amp;</code>表示父选择器，上栗<code>&amp;:hover</code>等价于<code>a:hover</code></p>
<h2 id="计算">计算</h2>
<p>任何数值、颜色和变量都可以计算。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@num:</span> <span class="number">10px</span></div><div class="line">#id &#123;</div><div class="line">	<span class="attribute">width</span>: <span class="variable">@num</span> * <span class="number">10</span>;</div><div class="line">    <span class="attribute">height</span>: calc(<span class="variable">@num</span> + <span class="number">5px</span>);		<span class="comment">// calc()是css3中的属性，用于计算</span></div><div class="line">    <span class="attribute">padding</span>: <span class="string">~'calc(@num - 5px)'</span>	<span class="comment">// 不会在编译后的css文件中显示计算结果</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="函数">函数</h2>
]]></content>
      
        
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> LESS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js字符串截取]]></title>
      <url>http://ChunlLing.github.io.com/2017/03/29/js%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%88%AA%E5%8F%96/</url>
      <content type="html"><![CDATA[<p>截取字符串的三个方法<code>substring()</code>，<code>slice()</code>和<code>split()</code>对比，<code>substr()</code>已废弃，不作考虑~</p>
<h1 id="substring-返回字符串的一个子串">substring()： 返回字符串的一个子串</h1>
<h2 id="概要">概要</h2>
<p>string.substring(from, to)<br>
<em>from</em> : 一个非负整数，指定要提取的子串的第一个字符在string中的位置<br>
<em>to</em> : 一个非负整数，比要提取的子串的最后一个字符的位置大1.如果省略这个参数，则返回的子串将持续到string的结尾<br>
返回： 一个新的字符串，长度为to-from，内容为string的一个子串。新字符串的内容为string中从位置from到to-1的字符的副本</p>
<h2 id="描述">描述</h2>
<p>如果from等于to，返回空字符串<br>
如果from比to大，先交换两个参数的值，然后返回它们之间的子串<br>
此方法不接受负参<br>
不修改string</p>
<hr>
<h1 id="slice-提取一个子串">slice()： 提取一个子串</h1>
<h2 id="概要">概要</h2>
<p>string.slice(start, end)<br>
<em>start</em> : 切片开始的索引。如果为负，将从该字符串的尾部开始计算，如-1代表最后一个字符，-2代表倒数第二个字符<br>
<em>end</em> : 紧跟着切片结尾的字符串索引。如果不指定，切片将包括从start到当前字符串结尾的所有字符；如果参数为负，将从该字符串的尾部开始计算<br>
返回： 一个新的字符串，内容为string中自start位置开始并且包含start位置，直到但不包含end位置的所有字符</p>
<h2 id="描述">描述</h2>
<p>返回一个字符串，内容为string中的一个切片或子串。<br>
不修改string</p>
<hr>
<h1 id="split-将一个字符串切分为一个由字符串组成的数组">split(): 将一个字符串切分为一个由字符串组成的数组</h1>
<h2 id="概要">概要</h2>
<p>string.split(delimiter, limit)<br>
<em>delimiter</em> : string切分处的字符串或正则表达式<br>
<em>limit</em> : 可选，整数，指定已返回数组的最大长度。如果指定，最多返回数量为这个数字的子串；如果没有指定，将切分整个字符串<br>
返回： 一个由字符串组成的数组</p>
<h2 id="描述">描述</h2>
<p>split()方法创建并返回一个数组，内容为至多limit个给定的字符串string的子串。子串创建的方式：从string()的开头搜索到结尾，在所有匹配delimiter的文本的前后方断开。分割文本不包含在返回的子串中。但当delimiter为带圆括号的正则表达式时可返回匹配圆括号内的子串（@.@见快捷测试）</p>
<hr>
<p>快捷测试</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str1 = <span class="string">'abcdef'</span>;</div><div class="line"><span class="built_in">console</span>.log(str1);</div><div class="line"><span class="built_in">console</span>.log(str1.substring(<span class="number">0</span>, <span class="number">3</span>));</div><div class="line"><span class="built_in">console</span>.log(str1);</div><div class="line"></div><div class="line"><span class="keyword">var</span> str2 = <span class="string">'abcdef'</span>;</div><div class="line"><span class="built_in">console</span>.log(str2);</div><div class="line"><span class="built_in">console</span>.log(str2.sclice(<span class="number">0</span>, <span class="number">3</span>));</div><div class="line"><span class="built_in">console</span>.log(str2);</div><div class="line"><span class="built_in">console</span>.log(str2.sclice(<span class="number">4</span>, <span class="number">-3</span>));</div><div class="line"></div><div class="line"><span class="keyword">var</span> str3 = <span class="string">'hello world'</span>;</div><div class="line"><span class="built_in">console</span>.log(str3);</div><div class="line"><span class="built_in">console</span>.log(str3.split(<span class="string">' '</span>));</div><div class="line"><span class="built_in">console</span>.log(str3);</div><div class="line"><span class="built_in">console</span>.log(str3.split(<span class="regexp">/hello/</span>));</div><div class="line"><span class="built_in">console</span>.log(str3.split(<span class="regexp">/(hello)/</span>));</div><div class="line"></div><div class="line"><span class="keyword">var</span> str4 = <span class="string">'hello &lt;b&gt;world&lt;/b&gt;'</span>;</div><div class="line"><span class="built_in">console</span>.log(str4.split(<span class="regexp">/&lt;[^&gt;]*&gt;/</span>));</div><div class="line"></div><div class="line"><span class="keyword">var</span> str5 = <span class="string">'hello hello &lt;b&gt;world&lt;/b&gt;'</span>;</div><div class="line"><span class="built_in">console</span>.log(str5.split(<span class="regexp">/(&lt;[^&gt;]*&gt;)/</span>));</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS布局]]></title>
      <url>http://ChunlLing.github.io.com/2017/03/24/%E5%B8%83%E5%B1%80-%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%E5%92%8C%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/</url>
      <content type="html"><![CDATA[<p>先花1分钟时间，想想怎样实现一个三列布局？？？</p>
<p>在IFE的任务三和任务九中为实现这种布局想的几种方法。笔记~</p>
<hr>
<p>PS:方便想象，左中右结构如下</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> id=<span class="string">"left"</span>&gt;&lt;/<span class="keyword">div</span>&gt;	<span class="comment">// 左</span></div><div class="line">&lt;<span class="keyword">div</span> id=<span class="string">"middle"</span>&gt;&lt;/<span class="keyword">div</span>&gt;	<span class="comment">// 中</span></div><div class="line">&lt;<span class="keyword">div</span> id=<span class="string">"right"</span>&gt;&lt;/<span class="keyword">div</span>&gt;	<span class="comment">// 右</span></div></pre></td></tr></table></figure>
<p>问题描述：左右两栏宽度固定，中间一栏自适应。
应用背景：有时在网页中，左边栏通常作为侧栏显示一些次要信息，右边栏或者为广告位，需要优先渲染中间栏。</p>
<p>方案：</p>
<ol>
<li>HTML结构按中左右顺序，CSS为浮动+定位+内边距（圣杯布局）</li>
<li>HTML结构按中左右顺序，CSS为浮动+外边距（双飞翼布局）</li>
</ol>
<p>第一种方式实现代码</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* HTML结构 */</span></div><div class="line"><span class="params">&lt;div class="container"&gt;</span></div><div class="line">	<span class="params">&lt;div id="middle"&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">	<span class="params">&lt;/div&gt;</span></div><div class="line">	<span class="params">&lt;div id="left"&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">	<span class="params">&lt;/div&gt;</span></div><div class="line">	<span class="params">&lt;div id="right"&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">	<span class="params">&lt;/div&gt;</span></div><div class="line"><span class="params">&lt;/div&gt;</span></div><div class="line"><span class="comment">/* CSS代码 */</span></div><div class="line">.<span class="class">container </span>&#123;</div><div class="line">	padding-left: <span class="number">200</span>px;</div><div class="line">	padding-right: <span class="number">220</span>px;</div><div class="line"><span class="symbol">	position:</span> relative;</div><div class="line"><span class="symbol">	overflow:</span> hidden;</div><div class="line">	background-color: <span class="meta">#eee;</span></div><div class="line">&#125;</div><div class="line"><span class="meta">#left, #middle, #right &#123;</span></div><div class="line"><span class="symbol">	float:</span> left;</div><div class="line"><span class="symbol">	position:</span> relative;</div><div class="line">&#125;</div><div class="line"><span class="meta">#left &#123;</span></div><div class="line"><span class="symbol">	left:</span> <span class="number">-200</span>px;</div><div class="line">	margin-left: <span class="number">-100</span>%;</div><div class="line"><span class="symbol">	width:</span> <span class="number">200</span>px;</div><div class="line">	background-color: red;</div><div class="line">&#125;</div><div class="line"><span class="meta">#middle &#123;</span></div><div class="line"><span class="symbol">	width:</span> <span class="number">100</span>%;</div><div class="line">	background-color: green;</div><div class="line">&#125;</div><div class="line"><span class="meta">#right &#123;</span></div><div class="line"><span class="symbol">	right:</span> <span class="number">-220</span>px;</div><div class="line">	margin-left: <span class="number">-220</span>px;</div><div class="line"><span class="symbol">	width:</span> <span class="number">220</span>px;</div><div class="line">	background-color: blue;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：.container的宽度不能设置为100%！！否则左右两栏会溢出内容区</p>
<p>第二种方式实现代码</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* HTML结构 */</span></div><div class="line"><span class="params">&lt;div class="container"&gt;</span></div><div class="line">	<span class="params">&lt;div id="middle"&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">	<span class="params">&lt;/div&gt;</span></div><div class="line"><span class="params">&lt;/div&gt;</span></div><div class="line"><span class="params">&lt;div id="left"&gt;</span></div><div class="line">	<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">	<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">	<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">	<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line"><span class="params">&lt;/div&gt;</span></div><div class="line"><span class="params">&lt;div id="right"&gt;</span></div><div class="line">	<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">	<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">	<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">	<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">	<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">	<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">	<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">	<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line"><span class="params">&lt;/div&gt;</span></div><div class="line"><span class="comment">/* CSS代码 */</span></div><div class="line"><span class="meta">#left, #right, .container &#123;</span></div><div class="line"><span class="symbol">	float:</span> left;</div><div class="line">&#125;</div><div class="line"><span class="meta">#left &#123;</span></div><div class="line">	margin-left: <span class="number">-100</span>%;</div><div class="line"><span class="symbol">	width:</span> <span class="number">200</span>px;</div><div class="line">	background-color: red;</div><div class="line">&#125;</div><div class="line"><span class="meta">#right &#123;</span></div><div class="line">	margin-left: <span class="number">-220</span>px;</div><div class="line"><span class="symbol">	width:</span> <span class="number">220</span>px;</div><div class="line">	background-color: blue;</div><div class="line">&#125;</div><div class="line">.<span class="class">container </span>&#123;</div><div class="line"><span class="symbol">	width:</span> <span class="number">100</span>%;</div><div class="line">	background-color: <span class="meta">#eee;</span></div><div class="line">&#125;</div><div class="line"><span class="meta">#middle &#123;</span></div><div class="line">	margin-left: <span class="number">200</span>px;</div><div class="line">	margin-right: <span class="number">220</span>px;</div><div class="line">	background-color: green;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>两种布局方式对比</strong></p>
<p>相同点：</p>
<ul>
<li>都利用了浮动</li>
<li>左栏左外边距均为-100%</li>
</ul>
<p>不同点：</p>
<ul>
<li>HTML结构不同，圣杯结构三栏同级，而双飞翼布局则是在中间栏外层再加上个包裹容器</li>
<li>圣杯布局利用相对定位+padding去除左栏和右栏对中间栏的遮挡</li>
<li>双飞翼布局则是利用中间栏的外边距</li>
<li>圣杯布局将中间栏的宽度设为100%，而双飞翼布局将中间栏的包裹层宽度设为100%</li>
</ul>
<p>两种布局方式的效果是一样的：
<img src="http://ommn78ss1.bkt.clouddn.com/static/images/CSS%E5%B8%83%E5%B1%80/%E4%B8%89%E6%A0%8F%E5%B8%83%E5%B1%80.png" alt="三栏布局"></p>
<hr>
<p>问题扩展：不限宽高<br>
布局策略：</p>
<ol>
<li>display: flex</li>
</ol>
<p>对容器使用<code>display: flex;</code>，设置<code>justify-content</code>属性，有五个可选值：<code>flex-star</code>左对齐，'center’居中，<code>flex-end</code>右对齐，<code>space-between</code>两端对齐，中间内容均匀分布，<code>space-around</code>均匀分布（与space-between不同的是没有两端对齐）</p>
<p>需要对自适应的子元素设置<code>width: 100%</code></p>
<p>最终实现等高布局，高度为子元素中最大的高度</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* HTML结构 */</span></div><div class="line"><span class="params">&lt;div class="container"&gt;</span></div><div class="line">	<span class="params">&lt;div id="left"&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">	<span class="params">&lt;/div&gt;</span></div><div class="line">	<span class="params">&lt;div id="middle"&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">	<span class="params">&lt;/div&gt;</span></div><div class="line">	<span class="params">&lt;div id="right"&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">		<span class="params">&lt;p&gt;</span><span class="number">123</span><span class="params">&lt;/p&gt;</span></div><div class="line">	<span class="params">&lt;/div&gt;</span></div><div class="line"><span class="params">&lt;/div&gt;</span></div><div class="line"><span class="comment">/* CSS代码 */</span></div><div class="line">.<span class="class">container </span>&#123;</div><div class="line"><span class="symbol">	display:</span> flex;</div><div class="line">	justify-content: space-between;</div><div class="line">	background-color: <span class="meta">#eee;</span></div><div class="line">&#125;</div><div class="line"><span class="meta">#left &#123;</span></div><div class="line"><span class="symbol">	width:</span> <span class="number">200</span>px;</div><div class="line">	background-color: red;</div><div class="line">&#125;</div><div class="line"><span class="meta">#middle &#123;</span></div><div class="line"><span class="symbol">	width:</span> <span class="number">100</span>%;</div><div class="line">	background-color: green;</div><div class="line">&#125;</div><div class="line"><span class="meta">#right &#123;</span></div><div class="line"><span class="symbol">	width:</span> <span class="number">220</span>px;</div><div class="line">	background-color: blue;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="external">Flex 布局教程：语法篇</a></p>
<p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html" target="_blank" rel="external">Flex 布局教程：实例篇</a></p>
<ol start="2">
<li>display: table-cell</li>
</ol>
<p>对容器设置<code>display: table; width: 100%</code>，对子元素设置<code>display: table-cell;</code></p>
<p>注意：<br>
如果没有对容器设置width: 100%，自适应一栏的宽度只有自身宽度，不会填充容器。</p>
<p>对容器设置<code>display: table; width: 100%</code>，子元素不设置宽度，可以实现等高等宽布局。</p>
<p>还有一些奇奇怪怪的现象，如不设置容器宽度，子元素宽度均为100%时除第一个子元素外其他元素的宽度由自身子元素宽度决定</p>
<p><a href="http://www.zhangxinxu.com/wordpress/2010/10/%E6%88%91%E6%89%80%E7%9F%A5%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8Ddisplaytable-cell%E7%9A%84%E5%BA%94%E7%94%A8/" target="_blank" rel="external">我所知道的几种display:table-cell的应用</a></p>
]]></content>
      
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git使用中遇到的错误]]></title>
      <url>http://ChunlLing.github.io.com/2017/03/14/git%E4%BD%BF%E7%94%A8%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%94%99%E8%AF%AF/</url>
      <content type="html"><![CDATA[<p>用以记录在使用git时遇到的错误方便自查~</p>
<hr>
<p>使用<code>git push</code>或<code>git push origin master</code>（向远程仓库提交）时遇到错误：
	<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">To <span class="keyword">https</span>://github.com/XXXX/XXXX.git</div><div class="line"> ! [rejected]        master -&gt; master (fetch <span class="keyword">first</span>)</div><div class="line">error: failed <span class="built_in">to</span> push some refs <span class="built_in">to</span> <span class="string">'https://github.com/XXXX/XXXX.git'</span></div><div class="line">hint: Updates were rejected because <span class="keyword">the</span> remote <span class="keyword">contains</span> work that you <span class="built_in">do</span></div><div class="line">hint: <span class="keyword">not</span> have locally. This is usually caused <span class="keyword">by</span> another repository pushing</div><div class="line">hint: <span class="built_in">to</span> <span class="keyword">the</span> same ref. You may want <span class="built_in">to</span> <span class="keyword">first</span> integrate <span class="keyword">the</span> remote changes</div><div class="line">hint: (e.g., <span class="string">'git pull ...'</span>) <span class="keyword">before</span> pushing again.</div><div class="line">hint: See <span class="keyword">the</span> <span class="string">'Note about fast-forwards'</span> <span class="keyword">in</span> <span class="string">'git push --help'</span> <span class="keyword">for</span> details.</div></pre></td></tr></table></figure></p>
<p>原因：远程仓库中的master分支（假设仅有一个master分支）有新的提交而本地仓库没有更新同步到这个提交，所以本地仓库向远程仓库推送提交的时候会报出这个错误。解决的方法是先把远程仓库的提交抓取下来再提交。
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>git pull</div><div class="line"><span class="variable">$ </span>git push</div></pre></td></tr></table></figure></p>
<p>注意：<code>git pull</code>会提示&quot;Please enter a commit message to explain why this merge is necessary, especially if it merges an updated upstream into a topic branch。&quot;，意思是输入可以描述此次合并分支的提交信息。可以选择写也可以不写，然后按下<code>Esc</code>键输入<code>:wq</code>（强制性写入文件并退出），按下<code>Enter</code>就可以了。</p>
]]></content>
      
        
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IFE热身题-小球吃星星]]></title>
      <url>http://ChunlLing.github.io.com/2017/03/13/IFE%E7%83%AD%E8%BA%AB%E9%A2%98-%E5%B0%8F%E7%90%83%E5%90%83%E6%98%9F%E6%98%9F/</url>
      <content type="html"><![CDATA[<p>下午做的四道题，觉得第四道hin有趣，又玩了几遍，做个记录~</p>
<hr>
<p>先看下题目<br>
	<img src="http://ommn78ss1.bkt.clouddn.com/static/images/IFE%E7%83%AD%E8%BA%AB%E9%A2%98-%E5%B0%8F%E7%90%83%E5%90%83%E6%98%9F%E6%98%9F/Step4.PNG" alt="Step4"></p>
<p>一开始看题目简直是一脸懵逼，后来在我不断钻研下，终于从万能的网友回答中看出了些门路~~~-_-|||</p>
<p>根据文本框的提示<code>调用'ball'的api移动小球，例如'ball.at(82, 46, ball =&gt; ball.turnRight())'</code>大概知道这里用到的是ES6的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="external">箭头函数</a>。<code>Ctrl+Shift+I</code>调出控制面板，输入<code>console.log(ball)</code>查看ball的API，然并卵，控制器输出的是<code>Uncaught ReferenceError: ball is not defined</code>。哼，我才不会就这么死心呢。打开控制台的<code>Sources</code>面板，<code>2017/asset\js</code>文件里面竟然有3个js文件！那好吧，格式下js文件（点击左下角的<code>{}</code>），<code>Ctrl+F</code>调出查找面板，查找<code>turnRight</code>，当当当，以下就是找到的关于<code>ball</code>的几个方法。
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">o.fackBall = &#123;</div><div class="line">       <span class="attr">x</span>: <span class="number">0</span>,</div><div class="line">       <span class="attr">y</span>: <span class="number">0</span>,</div><div class="line">       <span class="attr">direction</span>: <span class="string">""</span>,</div><div class="line">       <span class="attr">at</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, e, s</span>) </span>&#123;</div><div class="line">           <span class="keyword">return</span> c.at(t, e, s),</div><div class="line">           <span class="keyword">this</span></div><div class="line">       &#125;,</div><div class="line">       <span class="attr">turnLeft</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">           <span class="keyword">switch</span> (c.direction) &#123;</div><div class="line">           <span class="keyword">case</span> <span class="string">"t"</span>:</div><div class="line">               c.direction = <span class="string">"l"</span>;</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">case</span> <span class="string">"l"</span>:</div><div class="line">               c.direction = <span class="string">"b"</span>;</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">case</span> <span class="string">"b"</span>:</div><div class="line">               c.direction = <span class="string">"r"</span>;</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">case</span> <span class="string">"r"</span>:</div><div class="line">               c.direction = <span class="string">"t"</span></div><div class="line">           &#125;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">       &#125;,</div><div class="line">       <span class="attr">turnRight</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">           <span class="keyword">switch</span> (c.direction) &#123;</div><div class="line">           <span class="keyword">case</span> <span class="string">"t"</span>:</div><div class="line">               c.direction = <span class="string">"r"</span>;</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">case</span> <span class="string">"r"</span>:</div><div class="line">               c.direction = <span class="string">"b"</span>;</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">case</span> <span class="string">"b"</span>:</div><div class="line">               c.direction = <span class="string">"l"</span>;</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">case</span> <span class="string">"l"</span>:</div><div class="line">               c.direction = <span class="string">"t"</span></div><div class="line">           &#125;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">       &#125;,</div><div class="line">       <span class="attr">turnBack</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">           <span class="keyword">switch</span> (c.direction) &#123;</div><div class="line">           <span class="keyword">case</span> <span class="string">"t"</span>:</div><div class="line">               c.direction = <span class="string">"b"</span>;</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">case</span> <span class="string">"b"</span>:</div><div class="line">               c.direction = <span class="string">"t"</span>;</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">case</span> <span class="string">"l"</span>:</div><div class="line">               c.direction = <span class="string">"r"</span>;</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">case</span> <span class="string">"r"</span>:</div><div class="line">               c.direction = <span class="string">"l"</span></div><div class="line">           &#125;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">       &#125;,</div><div class="line">       <span class="attr">wait</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</div><div class="line">           <span class="keyword">return</span> c.waitStartTime = <span class="built_in">Date</span>.now(),</div><div class="line">           c.waitTime = t,</div><div class="line">           <span class="keyword">this</span></div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>大概看下代码，<code>turnLeft</code>是向左转，<code>turnRight</code>是向右转，<code>turnBack</code>是向后转，<code>wait</code>是使时间延迟。
　　那么，回来看题目。这XX我怎么知道坐标啊。再次感谢万能的网络MUA<sub>用鼠标点击屏幕控制台会显示点击点的坐标，诺，像酱</sub>
<img src="http://ommn78ss1.bkt.clouddn.com/static/images/IFE%E7%83%AD%E8%BA%AB%E9%A2%98-%E5%B0%8F%E7%90%83%E5%90%83%E6%98%9F%E6%98%9F/position.gif" alt="position"></p>
<p>有了坐标，有了API，那就开始动手吧
在笔记上规划好路径，写下每个转折点的坐标。
我的代码如下：</p>
   <figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">ball.at(<span class="number">0</span>, <span class="number">46</span>, ball =&gt; ball.wait(<span class="number">1500</span>));</div><div class="line">var right = (x, y) =&gt; ball.at(x, y, ball =&gt; ball.turnRight());</div><div class="line">var left = (x, y) =&gt; ball.at(x, y, ball =&gt; ball.turnLeft());</div><div class="line">var back = (x, y) =&gt; ball.at(x, y, ball =&gt; ball.turnBack());</div><div class="line">right(<span class="number">76</span>, <span class="number">46</span>);</div><div class="line">left(<span class="number">76</span>, <span class="number">136</span>);</div><div class="line">right(<span class="number">130</span>, <span class="number">136</span>);</div><div class="line">right(<span class="number">130</span>, <span class="number">243</span>);</div><div class="line">left(<span class="number">91</span>, <span class="number">243</span>);</div><div class="line">right(<span class="number">91</span>, <span class="number">364</span>);</div><div class="line">back(<span class="number">18</span>, <span class="number">364</span>);</div><div class="line">right(<span class="number">176</span>, <span class="number">364</span>);</div><div class="line">right(<span class="number">176</span>, <span class="number">468</span>);</div><div class="line">back(<span class="number">18</span>, <span class="number">468</span>);</div><div class="line">left(<span class="number">372</span>, <span class="number">468</span>);</div><div class="line">left(<span class="number">372</span>, <span class="number">46</span>);</div><div class="line">left(<span class="number">270</span>, <span class="number">46</span>);</div><div class="line">right(<span class="number">270</span>, <span class="number">134</span>);</div><div class="line">left(<span class="number">222</span>, <span class="number">134</span>);</div><div class="line">right(<span class="number">222</span>, <span class="number">243</span>);</div><div class="line">back(<span class="number">173</span>, <span class="number">243</span>);</div><div class="line">right(<span class="number">273</span>, <span class="number">243</span>);</div><div class="line">left(<span class="number">273</span>, <span class="number">290</span>);</div><div class="line">left(<span class="number">367</span>, <span class="number">290</span>);</div><div class="line">right(<span class="number">367</span>, <span class="number">105</span>);</div><div class="line">left(<span class="number">469</span>, <span class="number">105</span>);</div><div class="line">right(<span class="number">469</span>, <span class="number">14</span>);</div><div class="line">right(<span class="number">552</span>, <span class="number">14</span>);</div><div class="line">left(<span class="number">552</span>, <span class="number">105</span>);</div><div class="line">right(<span class="number">618</span>, <span class="number">105</span>);</div><div class="line">right(<span class="number">618</span>, <span class="number">190</span>);</div><div class="line">left(<span class="number">577</span>, <span class="number">190</span>);</div><div class="line">left(<span class="number">577</span>, <span class="number">473</span>);</div></pre></td></tr></table></figure>
<hr>
<p><strong>然而！！！然而！！！然而这不是我的解题过程</strong>。傻傻如我，是直接调出控制台记录每个区域块的左上顶点坐标和宽高值，所以当后来我知道可以用鼠标点击获取坐标时我就这表情/(ㄒoㄒ)/~~
<img src="http://ommn78ss1.bkt.clouddn.com/static/images/IFE%E7%83%AD%E8%BA%AB%E9%A2%98-%E5%B0%8F%E7%90%83%E5%90%83%E6%98%9F%E6%98%9F/%E6%97%A0%E6%A0%87%E9%A2%98.png" alt="解题过程1"></p>
<p>我规划的路径是(1)-&gt;(2)-&gt;(3)-&gt;(4)-&gt;(5)-&gt;(6)-&gt;(7)-&gt;(8)-&gt;(9)-&gt;(10)-&gt;(11)-&gt;(12)-&gt;(13)-&gt;(14)-&gt;(3)-&gt;(4)-&gt;(15)-&gt;(16)-&gt;(17)-&gt;(18)-&gt;(19)-&gt;(20)-&gt;(21)-&gt;(22)-&gt;(23)-&gt;(24)-&gt;(25)-&gt;(26)
　　不过后来发现这里有个坑：小球经过同个点的时候只能有一种行为，比方说上面的规划路径(3)、(4)是定义了两次，那么实际上小球在这两个点上最终的行为是以后定义的为准的，而我在这两个点定义的两次方向是相反的，所以小球第一次经过(3)点的时候就报错了。解决的方法有两个：1. 定义一个附近的点，但要注意这个点之前不会经过；2. 重新规划一条路线。我这里选择了重新规划路线，最终流程图是这样的：
<img src="http://ommn78ss1.bkt.clouddn.com/static/images/IFE%E7%83%AD%E8%BA%AB%E9%A2%98-%E5%B0%8F%E7%90%83%E5%90%83%E6%98%9F%E6%98%9F/%E6%97%A0%E6%A0%87%E9%A2%98%20-%20%E5%89%AF%E6%9C%AC.png" alt="解题过程2"></p>
<p>应该会有更优的方案，这里没有做对比。最后运行结果如图：
<img src="http://ommn78ss1.bkt.clouddn.com/static/images/IFE%E7%83%AD%E8%BA%AB%E9%A2%98-%E5%B0%8F%E7%90%83%E5%90%83%E6%98%9F%E6%98%9F/IFE_ball.gif" alt="运行结果"></p>
<p>关于小球运动后的两颗星星如何吃到。可以在前面加上<code>ball.at(0, 46, ball =&gt; ball.wait(1500));</code>，让小球先等一会再动。</p>
<p>总结：<strong>知无涯</strong>。当学习到的越多，就会越加意识到先前的浅薄无知，所以，保持虚心。在知乎看过一个关于前端的回答：前端的学习是先平缓后陡峭再平缓的，也许现在的我就在这陡峭的山脚下，但，我是一个喜欢爬上山顶看风景的人~</p>
]]></content>
      
        
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES6 </tag>
            
            <tag> 测试题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript基础笔记]]></title>
      <url>http://ChunlLing.github.io.com/2017/03/12/Javascript%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>学习资料来源：<br>
<a href="https://book.douban.com/subject/10549733/" target="_blank" rel="external">JavaScript权威指南</a><br>
<a href="https://book.douban.com/subject/10546125/" target="_blank" rel="external">JavaScript高级程序设计</a><br>
<a href="http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000" target="_blank" rel="external">廖雪峰–JavaScript全栈教程</a><br>
<a href="http://study.163.com/course/introduction/252008.htm#/courseDetail" target="_blank" rel="external">李炎恢JavaScript教程 第一季</a></p>
<h1 id="基本语法">基本语法</h1>
<p>Javascript区分大小写。</p>
<p>标识符命名规则：</p>
<ul>
<li>第一个字符必须是一个字母、下划线<code>_</code>或一个美元符号<code>$</code></li>
<li>其他字符可以是字母、下划线、美元符号或数字</li>
<li>不能把关键字、保留字、true、false和null作为标识符</li>
</ul>
<p><a href="http://www.w3school.com.cn/js/pro_js_keywords.asp" target="_blank" rel="external">ECMAScript全部关键字</a></p>
<p><a href="http://www.w3school.com.cn/js/pro_js_reservedwords.asp" target="_blank" rel="external">ECMA-262第三版全部保留字</a></p>
<p>注释：<br>
<code>//</code>单行注释<br>
<code>/* */</code>多行注释</p>
<p>Javascript的每个语句以<code>;</code>结束，语句块用<code>{}</code>。
虽然Javascript不强制使用<code>;</code>，不过始终补上<code>;</code>是一个良好的习惯。
可选分号通用规则：如果当前语句和下一行语句无法合并解析，Javascrpt则在第一行后填补分号。
示例：</p>
<figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">var</span> a</div><div class="line">a</div><div class="line">=</div><div class="line"><span class="number">3</span></div><div class="line">console.log(a)</div></pre></td></tr></table></figure>
<p>等价于</p>
<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var a<span class="comment">;</span></div><div class="line"><span class="attribute">a</span> = <span class="number">3</span><span class="comment">;</span></div><div class="line">console.log(a)<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>两个例外：</p>
<ol>
<li>
<p>如果<code>return</code>、<code>break</code>和<code>continue</code>后紧跟着换行，则会在换行处填补分号。
示例：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span></div><div class="line"><span class="literal">true</span></div></pre></td></tr></table></figure>
<p>等价于</p>
 <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span>;</div><div class="line"><span class="literal">true</span>;</div></pre></td></tr></table></figure>
</li>
<li>
<p>如果将<code>++</code>或<code>--</code>用做后缀表达式，应当和表达式在同一行，否则行尾自动填补分号。
示例：</p>
 <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="section">x</span></div><div class="line">++</div><div class="line">y</div></pre></td></tr></table></figure>
<p>等价于</p>
 <figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">x<span class="comment">;</span></div><div class="line">++y<span class="comment">;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>赋值语句：</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">var x</span> = 0;</div></pre></td></tr></table></figure>
<p>字符串也可以视为完整的语句</p>
<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"Hello World!"</span><span class="comment">;</span></div></pre></td></tr></table></figure>
<p>注意如果字符串不用<code>''</code>或<code>&quot;&quot;</code>包裹会抛出<code>ReferenceError（引用错误）</code>。</p>
<h1 id="数据类型">数据类型</h1>
<h2 id="原始类型primitive-type">原始类型（primitive type）</h2>
<h3 id="number">Number</h3>
<p>包含两种数值：整数和浮点数。<br>
八进制数值字面量：前导为<code>0</code><br>
十六进制数值字面量：前导为<code>0x</code><br>
浮点类型数值包含一个小数点，且小数点后面必须至少有一位数字。由于保存浮点数值需要的内存空间比整数型数值大两倍，如果浮点数值小数点后没有数字或数字都为0会自动转化为整型。<br>
对于过大或过小的数值可以用科学表示法<code>e表示法</code>，用e表示该数值的前面数值的10的指数次幂。浮点数值的范围在：<code>Number.MIN_VALUE</code>到<code>Number.MAX_VALUE</code>之间。如果超过了浮点数值范围的最大值或最小值，则会出现<code>Infinity（正无穷）</code>或<code>-Infinity（负无穷）</code>。<br>
<code>isFinite()</code>函数可以确定一个数值是否超过了规定范围，没有超过返回<code>true</code>，超过返回<code>false</code>。<br>
<code>NaN</code>即Not a Number，用于表示一个本来要返回数值的操作数未返回数值的情况（这样就不回抛出错误）。<code>NaN</code>与任何值都不相等，包括它自身。<br>
判别一个字面量x是否为<code>NaN</code>有两种方式：<code>x != x</code> 或者 <code>isNaN(x)</code> 。注意，<code>isNaN(true)</code>会返回<code>false</code>，因为<code>true</code>会被转换为数字1。<br>
非数值转化为数值：<code>Number()</code>、<code>parseInt()</code>、<code>parseFloat()</code></p>
<h3 id="string">String</h3>
<p>用于表示由零或多个16位Unicode字符组成的字符串。</p>
<h3 id="boolean">Boolean</h3>
<p>有两个值：<code>true</code>和<code>false</code>。而<code>true</code>不一定等于1，<code>false</code>不一定等于0.由于JavaScript区分大小写，所以<code>TRUE</code>和<code>FALSE</code>或其他不是Boolean类型的值。<br>
其他类型转换成Boolean类型规则：</p>
  <table>
  	<thead>
    	<tr>
        	<th>数据类型</th>
        	<th>转换为true的值</th>
        	<th>转换为false的值</th>
        </tr>
    </thead>
    <tbody>
    	<tr>
        	<td>Boolean</td>
        	<td>true</td>
        	<td>false</td>
        </tr>
    	<tr>
        	<td>String</td>
        	<td>任何非空字符串</td>
        	<td>空字符串</td>
        </tr>
    	<tr>
        	<td>Number</td>
        	<td>任何非零数字值（包括无穷大）</td>
        	<td>0和NaN</td>
        </tr>
    	<tr>
        	<td>Object</td>
        	<td>任何对象</td>
        	<td>null</td>
        </tr>
    	<tr>
        	<td>Undefined</td>
        	<td></td>
        	<td>undefined</td>
        </tr>
    </tbody>
  </table>
<h3 id="null">NULL</h3>
<p>只有一个值<code>null</code>。表示一个空对象引用（指针）。使用<code>typeof</code>操作符检测<code>null</code>会返回<code>object</code></p>
<h3 id="undefined">Undefined</h3>
<p>只有一个值<code>undefined</code>。在使用<code>var</code>声明变量但没有对其初始化时，这个变量的值就是<code>undefined</code><br>
对于未初始化的变量与未声明的变量，使用<code>typeof</code>操作符时都是返回<code>undefined</code>。从逻辑上而言，前者的值是<code>undefined</code>，而后者是<code>ReferenceError（引用错误）</code></p>
<h2 id="引用类型">引用类型</h2>
<h3 id="object">Object</h3>
<p>创建Object实例的方式：</p>
<ol>
<li><code>new Obiect()</code> 用new操作符后跟Object构造函数</li>
<li><code>{}</code> 使用对象字面量表示法</li>
</ol>
<p>访问属性的方式：</p>
<ol>
<li><code>.</code>点表示法</li>
<li><code>[]</code>方括号表示法</li>
</ol>
<h3 id="array">Array</h3>
<ul>
<li>转换方法：<a href="http://www.w3school.com.cn/jsref/jsref_join.asp" target="_blank" rel="external">join()</a></li>
<li>插入数据项：<a href="http://www.w3school.com.cn/jsref/jsref_push.asp" target="_blank" rel="external">push()</a> <a href="http://www.w3school.com.cn/jsref/jsref_pop.asp" target="_blank" rel="external">pop()</a> <a href="http://www.w3school.com.cn/jsref/jsref_shift.asp" target="_blank" rel="external">shift()</a> <a href="http://www.w3school.com.cn/jsref/jsref_unshift.asp" target="_blank" rel="external">unshift()</a></li>
<li>重排序：<a href="http://www.w3school.com.cn/jsref/jsref_sort.asp" target="_blank" rel="external">sort()</a> <a href="http://www.w3school.com.cn/jsref/jsref_reverse.asp" target="_blank" rel="external">reverse()</a></li>
<li>操作方法：<a href="http://www.w3school.com.cn/jsref/jsref_concat_array.asp" target="_blank" rel="external">concat()</a> <a href="http://www.w3school.com.cn/jsref/jsref_slice_array.asp" target="_blank" rel="external">slice()</a></li>
<li>位置方法：<a href="http://www.w3school.com.cn/jsref/jsref_indexOf.asp" target="_blank" rel="external">indexOf()</a> <a href="http://www.w3school.com.cn/jsref/jsref_lastIndexOf.asp" target="_blank" rel="external">lastIndexOf()</a></li>
<li>迭代方法：（假定下列方法的参数为function）
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every?v=example" target="_blank" rel="external">every()</a>：如果function每一项都返回true则返回true</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some?v=example" target="_blank" rel="external">some()</a>：如果function任一项返回true则返回true</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter?v=example" target="_blank" rel="external">filter()</a>：返回function返回true的项组成的数组</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach?v=example" target="_blank" rel="external">forEach()</a>：没有返回值</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map?v=example" target="_blank" rel="external">map()</a>：返回每次function调用的结果组成的数组</li>
</ul>
</li>
<li>缩小方法：<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce?v=example" target="_blank" rel="external">reduce()</a> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/ReduceRight?v=example" target="_blank" rel="external">reduceRight()</a></li>
</ul>
<h3 id="date">Date</h3>
<p>使用UTC（Coordinated Universal Time，国际协调时间）1970年1月1日午夜（零时）开始经过的毫秒数来保存日期。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">// 自动获得当前日期和时间</span></div><div class="line"><span class="keyword">var</span> time = <span class="built_in">Date</span>.now();<span class="comment">// 返回表示调用这个方法时的日期和时间的毫秒数，应用：计时器？</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Date</span>.now() + <span class="string">' || '</span> + now.getTime()); <span class="comment">// 两个结果是一样的</span></div></pre></td></tr></table></figure>
<h3 id="regexp">RegExp</h3>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">var expression</span> = /pattern/flags;</div></pre></td></tr></table></figure>
<p>pattern：可以是任何简单或复杂的正则表达式，可以包含字符类、限定符、分组、先前查找以及反向引用。每个正则表达式都可带有一或多个标志（flags），用以标明正则表达式的行为。<br>
flags：有以下3个标志</p>
<ul>
<li>g：全局模式，即模式被应用于所有字符串，而非在第一个匹配项时立即停止。</li>
<li>i：表示不区分大小写。</li>
<li>m：多行模式。即在到达一行文本末尾时还会继续查找下一行中是否存在与模式匹配的项。</li>
</ul>
<h3 id="function">Function</h3>
<p>两种定义方式：</p>
<ol>
<li>function foo() {}</li>
<li>var foo = function () {};</li>
</ol>
<p>两者的区别：在调用函数时第一种方式可写在调用语句之后，而第二种方式必须写在调用之前。<br>
函数内部属性：</p>
<ul>
<li><code>arguments</code>：保存函数参数<br>
arguments有一个<code>callee</code>属性，指向拥有这个arguments对象的函数。</li>
</ul>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// 下面两种方式均为递归且等价，但第二种更优，降低耦合度</div><div class="line">function <span class="built_in">factorial</span>(<span class="built_in">num</span>) &#123;</div><div class="line">  <span class="keyword">if</span> (<span class="built_in">num</span> &lt;= <span class="number">1</span>) &#123;</div><div class="line">    <span class="built_in">return</span> <span class="number">1</span>;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">return</span> <span class="built_in">num</span> * <span class="built_in">factorial</span>(nume-<span class="number">1</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">function <span class="built_in">factorial</span>(<span class="built_in">num</span>) &#123;</div><div class="line">  <span class="keyword">if</span> (<span class="built_in">num</span> &lt;= <span class="number">1</span>) &#123;</div><div class="line">    <span class="built_in">return</span> <span class="number">1</span>;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">return</span> <span class="built_in">num</span> * arguments.callee(nume-<span class="number">1</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>this</code>：函数执行的环境对象</li>
</ul>
<p>函数属性和方法：</p>
<ul>
<li><code>length</code>：表示函数希望接收的命名参数的个数</li>
<li><code>prototype</code>：指向一个对象，这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法</li>
<li><code>caller</code>：保存调用当前函数的函数的引用，如果是在全局作用域中调用当前函数，它的值为null</li>
<li><code>apply</code>：在特定的作用域调用函数，实际上等于设置函数体内this对象的值。该方法接收两个参数：一个使在其中运行函数的作用域，另一个是参数数组。其中，第二个参数可以是array的实例，也可以是arguments对象</li>
<li><code>call</code>：在特定的作用域调用函数，实际上等于设置函数体内this对象的值。该方法第一个参数与<code>apply</code>方法一致，其余参数必须逐个列举出来</li>
<li><code>bind</code>：创建一个函数实例，其this值会绑定到传给bind()函数的值</li>
</ul>
<hr>
<p>原始值是 <strong>不可更改</strong> 的；原始值得比较是 <strong>值</strong> 的比较。<br>
对象值是 <strong>可修改</strong> 的；对象的比较是 <strong>引用</strong> 的比较。</p>
<p><strong>typeof</strong>操作符：用来检测变量的数据类型</p>
<p>关于类型的几点规则：</p>
<ul>
<li>不要使用<code>new Number()</code>、<code>new Boolean()</code>、<code>new String()</code>创建包装对象；</li>
<li>用<code>parseInt()</code>或<code>parseFloat()</code>来转换任意类型到<code>number</code>；</li>
<li>用<code>String()</code>来转换任意类型到<code>string</code>，或直接调用某个对象的<code>toString()</code>方法；</li>
<li><code>typeof</code>操作符可以判断出<code>number</code>、<code>boolean</code>、<code>string</code>、<code>function</code>和<code>undefined</code>；</li>
<li>判断<code>Array</code>要使用<code>Array.isArray(arr)</code>；</li>
<li>判断<code>null</code>要使用<code>variable === null</code>；</li>
<li>判断某个全局变量是否存在用<code>typeof window.variable === 'undefined'</code>；</li>
<li>函数内部判断某个变量是否存在用<code>typeof variable ==='undefined'</code>；</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[停一下，再奔跑]]></title>
      <url>http://ChunlLing.github.io.com/2017/03/11/%E5%81%9C%E4%B8%80%E4%B8%8B%EF%BC%8C%E5%86%8D%E5%A5%94%E8%B7%91/</url>
      <content type="html"><![CDATA[<p>去掉修改论文和修复u盘以及其他杂务，差不多花了3天的时间折腾博客。虽然不快，从什么都不懂到看教程查文档大概能了解npm、git、hexo配置，在看到网页的效果一点一点的呈现出来的时候，还是小有成就感的，就像小时候课堂上完成作业被老师奖励小红花一样。
　　刚看到一句话</p>
<blockquote>
<p>每个人都应该拥有属于自己的想象世界，即使那个世界再可笑再荒谬。------ 朱德庸</p>
</blockquote>
<p>真巧，正是我心里所想。
　　小学、中学、大学，就像是一条既定的路线，沿着它走下去就对了。可是，毕业后呢？幸好，上大学后开始琢磨啥样的人生才是自己追求的。回忆起来，大一应该是最悠闲的时光吧。刚步入大学的校园，周围一起都是新奇的。来自四面八方的朋友，相对以前更自由的学习方式…那会在家人的帮助下，鼓捣着一间淘宝店，然而无意经营，却迷上了技术。那时也才刚接触计算机，能熟练的操作仅限于开机和关机，以及拆电池[捂脸.jpg]。从安装校园网客户端、用word制作传单一点一点慢慢积累基础的计算机操作，到后来饭上PS，“怂恿”自己参加平面设计比赛、大过年的躲在家P出游图-_-|||，再到现在恋上敲代码，不停的挖坑，也不停的填坑，每天都在收获新知识。因为喜欢而去坚持，感觉真幸运。
　　临近毕业，感觉像是突然间要成长的小孩，找工作、充实技能，迈出校园的大门，就要学会独当一面啦(๑•̀ㅂ•́)و✧
　　前几天和侄女通话，竟然聊了差不多一个小时，寡言如我每次和小孩子却能聊个没完。侄女问我以后想当什么呀，没法向侄女解释什么是程序猿，所以我开玩笑说我想做猴子。那小家伙在电话那边笑个不停，说姑姑想当猴子这太好笑了，然后又说她想做一棵树。哈哈哈莫名的小感动~
　　昨天拍的一张图，中区突然建起了这么一座楼，我以为我可能上了一学期的假课|(*′口`)
　　<img src="http://ommn78ss1.bkt.clouddn.com/static/images/%E5%81%9C%E4%B8%80%E4%B8%8B%EF%BC%8C%E5%86%8D%E5%A5%94%E8%B7%91/modify.jpg" alt="中区篮球场">
　　稍微修了一下，发觉还不错【快！夸！我！(‾◡◝)】
　　<img src="http://ommn78ss1.bkt.clouddn.com/static/images/%E5%81%9C%E4%B8%80%E4%B8%8B%EF%BC%8C%E5%86%8D%E5%A5%94%E8%B7%91/original.jpg" alt="">
　　现在是2017年3月11日1点11分，已不太记得是第几个超过0点的夜晚了。晚安~</p>
]]></content>
      
        
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[小白爱折腾之hexo+GitHub搭建个人博客]]></title>
      <url>http://ChunlLing.github.io.com/2017/03/08/%E5%B0%8F%E7%99%BD%E7%88%B1%E6%8A%98%E8%85%BE%E4%B9%8Bhexo-GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p>非教程帖，仅做挖坑记录和反思</p>
<h1 id="前期准备">前期准备：</h1>
<ul>
<li>安装git</li>
<li>安装node.js</li>
<li>安装hexo</li>
<li>申请GitHub账号</li>
</ul>
<h1 id="搭建步骤">搭建步骤：</h1>
<p>1 创建仓库：<code>用户名.github.io</code></p>
<p>2 在本地指定根目录输入命令（cmd或git）：hexo init 用户名.github,io
结果： 生成“用户名.github,io”文件夹</p>
<p><strong>文件结构树：</strong></p>
<ul>
<li>用户名.github,io
<ul>
<li>node_mdules</li>
<li>scaffolds</li>
<li>source		[资源文件]</li>
<li>themes		[主题文件]</li>
<li>.gitgnore</li>
<li>_config.yml	[站点配置文件]</li>
<li>package.json	[应用程序数据]</li>
</ul>
</li>
</ul>
<p>3 在“用户名.github,io”根目录输入命令（cmd或git）：hexo s，在浏览器输入localhost:4000</p>
<p>至此，初级搭建成功。</p>
<p>本地预览： <code>hexo s</code>或<code>hexo server</code></p>
<hr>
<h1 id="参考">参考：</h1>
<ul>
<li><a href="http://www.jianshu.com/p/380290deb8f0" target="_blank" rel="external">免费个人博客搭建详解</a></li>
<li><a href="http://div.io/topic/1691" target="_blank" rel="external">手把手教你使用Hexo + Github Pages搭建个人独立博客</a></li>
<li><a href="http://moxfive.coding.me/yelee/" target="_blank" rel="external">Yelee —— 简而不减 Hexo 双栏博客主题</a></li>
</ul>
<hr>
<h1 id="进阶-写博客">进阶-写博客：</h1>
<p>创建新文章： <code>hexo new &quot;文章标题&quot;</code> （存在source_posts目录中）</p>
<p>创建草稿： <code>hexo new draft &quot;文章标题&quot;</code> （会在source文件夹中新建一个文件夹“_drafts”）
发布草稿： <code>hexo publish &quot;文章标题&quot;</code> （会将存在source_drafts的草稿发布到&quot;_posts&quot;文件夹中）</p>
<p>安装自动部署发布工具：<code>hexo-deployer-git</code>
没安装的后果就是后面<code>hexo d</code>会出现 “cannot found git” 的错误</p>
<p>清除缓存：<code>hexo clean</code>
生成静态文件：<code>hexo generate</code>或<code>hexo g</code>
部署到git上：<code>hexo deploy</code>或<code>hexo d</code></p>
<hr>
<h1 id="进阶-更换主题">进阶-更换主题：</h1>
<p>到<a href="https://hexo.io/themes/" target="_blank" rel="external">Hexo</a>选择喜欢的主题。这里选了<a href="https://github.com/MOxFIVE/hexo-theme-yelee" target="_blank" rel="external">Yelee</a>这个主题。
<a href="http://moxfive.coding.me/yelee/" target="_blank" rel="external">Yelee安装教程</a>。教程很详细，这里就不细述了b(￣▽￣)d</p>
<p>趁着还有半小时断网，再试一个主题<a href="http://luuman.github.io/2015/12/27/Hexo/HexoTheme/" target="_blank" rel="external">Hexo 主题：SPFK</a></p>
<p>最后本博客选择Yelee和SPFK两个主题混搭。主要用了SPFK的样式，但用了Yelee的一些配置。</p>
<hr>
<h1 id="进阶-更改设置">进阶-更改设置</h1>
<h2 id="阅读全文设置"><strong>阅读全文设置</strong></h2>
<p><a href="https://twiceyuan.com/2014/05/25/hexo%E8%87%AA%E5%8A%A8%E6%B7%BB%E5%8A%A0readmore%E6%A0%87%E8%AE%B0/" target="_blank" rel="external">Hexo自动添加ReadMore标记</a></p>
<h2 id="文章排序"><strong>文章排序</strong></h2>
<p><a href="http://www.netcan666.com/2015/11/22/%E8%A7%A3%E5%86%B3Hexo%E7%BD%AE%E9%A1%B6%E9%97%AE%E9%A2%98/" target="_blank" rel="external">解决Hexo置顶问题</a></p>
<h2 id="emoji表情"><strong>emoji表情</strong></h2>
<p><a href="http://sumygg.com/2016/02/29/hexo-support-emoji/" target="_blank" rel="external">让Hexo支持emoji表情</a></p>
<h2 id="站点swiftype搜索框"><strong>站点Swiftype搜索框</strong></h2>
<ol>
<li>
<p>目标文件：<code>\themes\spfk\source\css\_partial</code>
操作：添加文件【添加<code>\themes\yelee\source\css\_partial</code>目录下的<code>search.styl</code>文件】</p>
</li>
<li>
<p>目标文件：<code>\themes\spfk\source\js\_partial</code>
操作：添加文件【添加<code>\themes\yelee\source\js\_partial</code>目录下的<code>search.js</code>文件】</p>
</li>
<li>
<p>目标文件：<code>\themes\spfk\layout\_partial\left-col.ejs</code>
操作：替换代码【将第一段代码替换成第二段代码】</p>
 <figure class="highlight erb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> <span class="keyword">if</span> (theme.search_box)&#123; </span><span class="xml"><span class="tag">%&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"st-default-search-input search"</span> <span class="attr">id</span>=<span class="string">"search"</span> <span class="attr">placeholder</span>=<span class="string">" Search..."</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span></span><span class="ruby">&#125;</span><span class="xml"><span class="tag">%&gt;</span></span></div></pre></td></tr></table></figure>
 <figure class="highlight erb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> <span class="keyword">if</span> (theme.search.on)&#123; </span><span class="xml"><span class="tag">%&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"search-form"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"local-search-input"</span> <span class="attr">name</span>=<span class="string">"q"</span> <span class="attr">placeholder</span>=<span class="string">"search..."</span> <span class="attr">class</span>=<span class="string">"search form-control"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">autocorrect</span>=<span class="string">"off"</span> <span class="attr">searchonload</span>=<span class="string">"&lt;%=</span></span><span class="ruby"> theme.search.onload </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span> /&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-times"</span> <span class="attr">onclick</span>=<span class="string">"resetSearch()"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"local-search-result"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">'no-result'</span>&gt;</span>No results found <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">'fa fa-spinner fa-pulse'</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span></span><span class="ruby">&#125;</span><span class="xml"><span class="tag">%&gt;</span></span></div></pre></td></tr></table></figure>
</li>
<li>
<p>目标文件：<code>\themes\spfk\source\js\pc.js</code>
操作：添加代码【添加到<code>define([], function(){})</code>的<code>function</code>里面<code>return</code>之前】</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (yiliaConfig.search) &#123;</div><div class="line">    <span class="keyword">var</span> search = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">require</span>([yiliaConfig.rootUrl + <span class="string">'js/search.js'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> inputArea = <span class="built_in">document</span>.querySelector(<span class="string">"#local-search-input"</span>);</div><div class="line">            <span class="keyword">var</span> $HideWhenSearch = $(<span class="string">"#toc, #tocButton, .post-list, #post-nav-button a:nth-child(2)"</span>);</div><div class="line">            <span class="keyword">var</span> $resetButton = $(<span class="string">"#search-form .fa-times"</span>);</div><div class="line">            <span class="keyword">var</span> $resultArea = $(<span class="string">"#local-search-result"</span>);</div><div class="line"></div><div class="line">            <span class="keyword">var</span> getSearchFile = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> search_path = <span class="string">"search.xml"</span>;</div><div class="line">                <span class="keyword">var</span> path = yiliaConfig.rootUrl + search_path;</div><div class="line">                searchFunc(path, <span class="string">'local-search-input'</span>, <span class="string">'local-search-result'</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">var</span> getFileOnload = inputArea.getAttribute(<span class="string">'searchonload'</span>);</div><div class="line">            <span class="keyword">if</span> (yiliaConfig.search &amp;&amp; getFileOnload === <span class="string">"true"</span>) &#123;</div><div class="line">                getSearchFile();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                inputArea.onfocus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; getSearchFile() &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">var</span> HideTocArea = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                $HideWhenSearch.css(<span class="string">"visibility"</span>,<span class="string">"hidden"</span>);</div><div class="line">                $resetButton.show();</div><div class="line">            &#125;</div><div class="line">            inputArea.oninput = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; HideTocArea() &#125;</div><div class="line">            inputArea.onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">if</span>(event.keyCode==<span class="number">13</span>) <span class="keyword">return</span> <span class="literal">false</span>&#125;</div><div class="line"></div><div class="line">            resetSearch = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                $HideWhenSearch.css(<span class="string">"visibility"</span>,<span class="string">"initial"</span>);</div><div class="line">                $resultArea.html(<span class="string">""</span>);</div><div class="line">                <span class="built_in">document</span>.querySelector(<span class="string">"#search-form"</span>).reset();</div><div class="line">                $resetButton.hide();</div><div class="line">                $(<span class="string">".no-result"</span>).hide();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            $resultArea.bind(<span class="string">"DOMNodeRemoved DOMNodeInserted"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (!$(e.target).text()) &#123;</div><div class="line">                    $(<span class="string">".no-result"</span>).show(<span class="number">200</span>);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                  $(<span class="string">".no-result"</span>).hide();</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &#125;)</div><div class="line">    &#125;()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li>
<p>目标文件：<code>\themes\spfk\layout\_partial\after-footer.ejs&quot;</code>
操作：删除代码</p>
 <figure class="highlight erb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> <span class="keyword">if</span> (theme.search_box)&#123; </span><span class="xml"><span class="tag">%&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">      <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"search"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"search"</span>)</div><div class="line">            search();</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="function"><span class="keyword">function</span> <span class="title">search</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        (<span class="function"><span class="keyword">function</span>(<span class="params">w,d,t,u,n,s,e</span>)</span>&#123;w[<span class="string">'SwiftypeObject'</span>]=n;w[n]=w[n]||<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        (w[n].q=w[n].q||[]).push(<span class="built_in">arguments</span>);&#125;;s=d.createElement(t);</div><div class="line">        e=d.getElementsByTagName(t)[<span class="number">0</span>];s.async=<span class="number">1</span>;s.src=u;e.parentNode.insertBefore(s,e);</div><div class="line">        &#125;)(<span class="built_in">window</span>,<span class="built_in">document</span>,<span class="string">'script'</span>,<span class="string">'//s.swiftypecdn.com/install/v2/st.js'</span>,<span class="string">'_st'</span>);</div><div class="line"></div><div class="line">        _st(<span class="string">'install'</span>,<span class="string">'A1Pz-LKMXbrzcFg2FWi6'</span>,<span class="string">'2.0.0'</span>);</div><div class="line">      &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span></span><span class="ruby">&#125;</span><span class="xml"><span class="tag">%&gt;</span></span></div></pre></td></tr></table></figure>
</li>
<li>
<p>目标文件：<code>\themes\spfk\source\css\style.styl</code>
操作：添加代码【添加到最后防止被覆盖】</p>
 <figure class="highlight openscad"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="built_in">search</span></div><div class="line">  @<span class="built_in">import</span> <span class="string">"_partial/search"</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>上面主要是实现本地搜索功能，修改样式看个人喜好，主要修改的样式文件是：<code>\themes\spfk\source\css\_partial\main.styl</code>
小技巧：<code>Ctrl+F</code>调出查找栏，输入“search”，对包含有这个对象的文件进行相应的修改，耐力活 =_=</p>
<hr>
<h1 id="进阶-使用插件">进阶-使用插件</h1>
<h2 id="使用七牛云"><strong>使用七牛云</strong></h2>
<ol>
<li>
<p>注册<a href="https://www.qiniu.com/" target="_blank" rel="external">七牛</a>云账号。注册完成后添加对象存储，记住空间名称，后面要用到</p>
</li>
<li>
<p>在根目录下执行：<code>npm install hexo-qiniu-sync --save</code></p>
</li>
<li>
<p>在站点配置文件<code>_config.yml</code>（在根目录下）中配置：</p>
 <figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 七牛云</span></div><div class="line"><span class="attr">qiniu:</span></div><div class="line"><span class="attr">  offline:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  sync:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  bucket:</span> <span class="comment">#空间名称</span></div><div class="line"><span class="comment"># secret_file: sec/qn.json or C:</span></div><div class="line"><span class="attr">  access_key:</span> <span class="comment">#七牛个人中心/密钥管理复制</span></div><div class="line"><span class="attr">  secret_key:</span> <span class="comment">#七牛个人中心/密钥管理复制</span></div><div class="line"><span class="attr">  dirPrefix:</span> static</div><div class="line"><span class="attr">  urlPrefix:</span> http://bucket_name.qiniudn.com/static</div><div class="line"><span class="attr">  up_host:</span> http://upload.qiniu.com</div><div class="line"><span class="attr">  local_dir:</span> static</div><div class="line"><span class="attr">  update_exist:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  image:</span> </div><div class="line"><span class="attr">    folder:</span> images</div><div class="line"><span class="attr">    extend:</span> </div><div class="line"><span class="attr">  js:</span></div><div class="line"><span class="attr">    folder:</span> js</div><div class="line"><span class="attr">  css:</span></div><div class="line"><span class="attr">    folder:</span> css</div></pre></td></tr></table></figure>
<p>这里注释了secret_file: sec/qn.json or C:是因为会报错</p>
 <figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">FATAL incomplete <span class="built_in">explicit</span> mapping pair; a <span class="built_in">key</span> node <span class="built_in">is</span> missed <span class="built_in">at</span> line <span class="number">74</span>, column <span class="number">32</span>:</div><div class="line">     secret_file: <span class="built_in">sec</span>/qn.json <span class="keyword">or</span> C:</div><div class="line">     ...</div></pre></td></tr></table></figure>
</li>
<li>
<p>执行<code>hexo qiniu s</code>同步上传</p>
</li>
</ol>
<hr>
<h1 id="遇到的问题">遇到的问题：</h1>
<ol>
<li>
<p>使用hexo d之后直接输入<code>https://用户名.github.io</code>显示404
答： 没有配置deploy的type和repo</p>
</li>
<li>
<p>更改以前的文章内容，使用hexo clean、hexo g、hexo d没有用，而且localhost:4000也一样
答： 因为修改的文件不是_post里面的文件…(╯‵□′)╯︵┻━┻z
反思： 要细心阿！！！</p>
</li>
<li>
<p>编辑输入时替换后一格内容【这个不在hexo配置范畴内】
答：按下<code>Insert</code>键试试？</p>
</li>
<li>
<p>关于markdown的有序列表一点小问题。编辑的时候应该为子项内容缩进一格，否则如果当子项内容长时该子项后面的子项序号会重新从1开始。</p>
</li>
<li>
<p>markdown表格？似乎没有被渲染成表格。</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">|<span class="string"> column </span>|<span class="string"> column </span>|</div><div class="line">|<span class="string">--------</span>|<span class="string">--------</span>|</div><div class="line">|<span class="string">        </span>|<span class="string">        </span>|</div></pre></td></tr></table></figure>
<p>因为被浏览器（Chrome）检测为不安全脚本了</p>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
