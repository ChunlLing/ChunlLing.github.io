<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Less学习笔记]]></title>
      <url>http://ChunlLing.github.io.com/2017/03/18/Less%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>记录Less学习的笔记。</p>
<h1 id="Less简介及安装"><a href="#Less简介及安装" class="headerlink" title="Less简介及安装"></a>Less简介及安装</h1><p><a href="http://lesscss.org/" target="_blank" rel="external">Less官网</a><br><a href="http://less.bootcss.com/#" target="_blank" rel="external">Less中文官网</a></p>
<p>服务器端安装：<code>$ npm install -g less</code></p>
<p>使用sublime text编译：’Ctrl+Shift+P’打开命令面板，输入<code>install package</code>，安装<code>lessc</code>、<code>Less2Css</code>两个插件。<br>此时新建一个less文件会提示一个错误<code>LESS:Unable to interpret argument clean-css</code>。解决方法：<code>Window+R</code>输入<code>cmd</code>打开命令面板，输入命令：<code>npm install less-plugin-clean-css</code>。</p>
<hr>
<hr>
<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>变量的作用是把值定义在一个地方，在需要的地方直接使用变量名引用，有利于代码复用和维护。（理解为C中的<code>defined</code>？）<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 定义变量形式：@variableName: value;</span></div><div class="line"><span class="variable">@color:</span> <span class="number">#123456</span>;</div><div class="line"><span class="comment">// 引用变量：@variableName</span></div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">	<span class="attribute">background-color</span>: <span class="variable">@color</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="变量插值"><a href="#变量插值" class="headerlink" title="变量插值"></a>变量插值</h3><h4 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@selector:</span> banner;</div><div class="line"><span class="selector-class">.@&#123;selector&#125;</span> &#123;</div><div class="line">	<span class="attribute">display</span>: block;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译后：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.banner</span> &#123;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h4><p>···<br>@img: ‘../img’;<br>div {<br>    background-image: url(“@{img}/bg.jpg”);<br>}<br>···<br>编译后<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"../img/bg.jpg"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="导入语句"><a href="#导入语句" class="headerlink" title="导入语句"></a>导入语句</h4><p>句法：<code>@import &quot;@{themes}/tidal-wave.less&quot;</code>;<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@themes:</span> <span class="string">'../src/themes'</span>;</div><div class="line"><span class="keyword">@import</span> <span class="string">"@&#123;themes&#125;/tidal-wave.less"</span>;</div></pre></td></tr></table></figure></p>
<h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@property:</span> color;</div><div class="line"><span class="selector-class">.div-1</span> &#123;</div><div class="line">	<span class="attribute">@&#123;property&#125;</span>: <span class="number">#444</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 少了&#123;&#125;不会编译</span></div><div class="line"><span class="selector-class">.div-2</span> &#123;</div><div class="line">	<span class="variable">@property:</span> <span class="number">#444</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译后<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.div-2</span> &#123;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#444</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="变量名"><a href="#变量名" class="headerlink" title="变量名"></a>变量名</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@fnord:</span>  <span class="string">"I am fnord."</span>;</div><div class="line"><span class="variable">@var:</span>    <span class="string">"fnord"</span>;</div><div class="line"><span class="selector-class">.div-1</span> &#123;</div><div class="line">	<span class="attribute">content</span>: <span class="variable">@var</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.div-2</span> &#123;</div><div class="line">	<span class="attribute">content</span>: <span class="variable">@@var</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译后<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.div-1</span> &#123;</div><div class="line">  <span class="attribute">content</span>: <span class="string">"fnord"</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.div-2</span> &#123;</div><div class="line">  <span class="attribute">content</span>: <span class="string">"I am fnord."</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="懒惰加载"><a href="#懒惰加载" class="headerlink" title="懒惰加载"></a>懒惰加载</h3><p>变量是延迟加载的，不必在使用之前声明。<br>当定义变量多次时，将使用从当前范围向上搜索变量的最后一个定义。</p>
<hr>
<h2 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h2><p><code>extend</code>是一个Less伪类，它会合并它所在的选择器和它所匹配的引用。<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">nav</span> <span class="selector-tag">ul</span> &#123;</div><div class="line">  &amp;:extend(.inline);</div><div class="line">  <span class="attribute">background</span>: blue;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.inline</span> &#123;</div><div class="line">  &amp;:extend(nav ul);	<span class="comment">// 这里括号内的选择器必须是存在且完整的，参考扩展的精确匹配</span></div><div class="line">  <span class="attribute">color</span>: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译后：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">nav</span> <span class="selector-tag">ul</span>,</div><div class="line"><span class="selector-class">.inline</span> &#123;</div><div class="line">  <span class="attribute">background</span>: blue;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.inline</span>,</div><div class="line"><span class="selector-tag">nav</span> <span class="selector-tag">ul</span> &#123;</div><div class="line">  <span class="attribute">color</span>: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="扩展语法"><a href="#扩展语法" class="headerlink" title="扩展语法"></a>扩展语法</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.a</span><span class="selector-pseudo">:extend(.b)</span> &#123;&#125;</div><div class="line"><span class="comment">// 下面一段与上面等价</span></div><div class="line"><span class="selector-class">.a</span> &#123;</div><div class="line">	<span class="selector-tag">&amp;</span><span class="selector-pseudo">:extend(.b)</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 关键字'all'扩展所有包含有'.b'的实例</span></div><div class="line"><span class="selector-class">.a</span><span class="selector-pseudo">:extend(.b</span> <span class="keyword">all</span>)</div><div class="line"><span class="comment">// 使用逗号分隔可以包含多个要扩展的类</span></div><div class="line"><span class="selector-class">.a</span><span class="selector-pseudo">:extend(.b</span>, <span class="selector-class">.c</span>) &#123;&#125;</div></pre></td></tr></table></figure>
<h3 id="为选择器附加扩展"><a href="#为选择器附加扩展" class="headerlink" title="为选择器附加扩展"></a>为选择器附加扩展</h3><p>一个选择器可以包含多个扩展分支，但是所有的扩展都必须在选择器的尾部。允许在选择器和扩展之间有空格。<br>如果一个规则集包含多个选择器，所有选择器都可以使用<code>extend</code>关键字。</p>
<h3 id="规则集内的扩展"><a href="#规则集内的扩展" class="headerlink" title="规则集内的扩展"></a>规则集内的扩展</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">pre:</span>hover,</div><div class="line">.some-<span class="class"><span class="keyword">class</span> &#123;</span></div><div class="line">  &amp;:<span class="keyword">extend</span>(div pre);</div><div class="line">&#125;</div><div class="line"><span class="symbol">pre:</span><span class="symbol">hover:</span><span class="keyword">extend</span>(div pre),</div><div class="line">.some-<span class="class"><span class="keyword">class</span>:<span class="title">extend</span>(<span class="title">div</span> <span class="title">pre</span>) &#123;&#125;</span></div><div class="line">/<span class="regexp">/ 两者等价</span></div></pre></td></tr></table></figure>
<h3 id="嵌套选择器中的扩展"><a href="#嵌套选择器中的扩展" class="headerlink" title="嵌套选择器中的扩展"></a>嵌套选择器中的扩展</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.bucket</span> &#123;</div><div class="line">  <span class="selector-tag">tr</span> &amp; &#123; <span class="comment">// nested ruleset with target selector</span></div><div class="line">    <span class="attribute">color</span>: blue;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.some-class</span>:extend(<span class="selector-tag">tr</span> .bucket) &#123;&#125; <span class="comment">// nested ruleset is recognized</span></div></pre></td></tr></table></figure>
<p>编译后：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">tr</span> <span class="selector-class">.bucket</span>,</div><div class="line"><span class="selector-class">.some-class</span> &#123;</div><div class="line">  <span class="attribute">color</span>: blue;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="扩展中的精确匹配"><a href="#扩展中的精确匹配" class="headerlink" title="扩展中的精确匹配"></a>扩展中的精确匹配</h3><p>默认在选择器之间寻找精确匹配。<br>以下所有情况都认为不匹配（不匹配(⊙ ︿ ⊙)）：</p>
<ul>
<li><code>*.class</code>和<code>.class</code>，虽然选择器是等价的</li>
<li><code>nth-child(1n+3)</code>和<code>nth-child(n+3)</code>，虽然表达式是等价的，这里表达式只是为了说明</li>
<li><code>[title=title]</code>、<code>[title=&#39;title&#39;]</code>和[title=”title”]，即引号类型也有关系</li>
</ul>
<h3 id="扩展中的选择器插值"><a href="#扩展中的选择器插值" class="headerlink" title="扩展中的选择器插值"></a>扩展中的选择器插值</h3><p>extend不能匹配变量选择器，但可以将<code>:entend</code>附加给插值选择器</p>
<hr>
<h2 id="混合"><a href="#混合" class="headerlink" title="混合"></a>混合</h2><p>从现有的样式混合属性。</p>
<h3 id="带参数的混合"><a href="#带参数的混合" class="headerlink" title="带参数的混合"></a>带参数的混合</h3><p>在Less中可以定义一些通用的属性集为一个class，然后在另一个选择器中去引用这个class。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 不带括号的声明在编译后的css文件中可以看到这个类的声明</span></div><div class="line"><span class="selector-class">.box-1</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box-2</span>() &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box-3</span>(<span class="variable">@num</span>) &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="variable">@num</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="variable">@num</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box-4</span>(<span class="variable">@num</span>: <span class="number">200px</span>) &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="variable">@num</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="variable">@num</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#222</span>;</div><div class="line">    </div><div class="line">    <span class="selector-class">.box-1</span>;		<span class="comment">// 不能加()</span></div><div class="line">    <span class="selector-class">.box-2</span>();		<span class="comment">// 必须要加()</span></div><div class="line">    <span class="selector-class">.box-3</span>(<span class="number">100px</span>);	<span class="comment">// 必须传入一个参数</span></div><div class="line">    <span class="selector-class">.box-3</span>();		<span class="comment">// 可以不传参，使用默认值</span></div><div class="line">    <span class="selector-class">.box-3</span>(<span class="number">400px</span>);	<span class="comment">// 可以自定义参数</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译后的结果：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box-1</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#222</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对于多参数，可以使用逗号<code>,</code>或分号<code>;</code>分隔不同的参数，但建议使用分号进行分隔。因为逗号分隔的参数可能在编译过程中被当做一个参数的值是一个列表。举个例子~<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box-1</span>(<span class="variable">@color</span>: red; <span class="variable">@width</span>: <span class="number">2px</span>)&#123;...&#125;</div><div class="line"><span class="selector-class">.box-2</span>(<span class="variable">@color</span>: red green blue; <span class="variable">@width</span>: <span class="number">2px</span>)&#123;...&#125;</div></pre></td></tr></table></figure></p>
<h3 id="作为函数使用的混合"><a href="#作为函数使用的混合" class="headerlink" title="作为函数使用的混合"></a>作为函数使用的混合</h3><p>官方文档：<br>Variables and mixins defined in a mixin are visible and can be used in caller’s scope. There is only one exception, a variable is not copied if the caller contains a variable with the same name (that includes variables defined by another mixin call). Only variables present in callers local scope are protected. Variables inherited from parent scopes are overridden.<br>所有定义在一个mixin中的变量都是可见的，还可以用于调用它的作用域中。只有一种异常情况不会复制变量：如果调用者中包含同名变量（包括调用另一个mixin中定义的变量）。只有存在于调用者局部作用域中的变量受到保护。从父作用域继承的变量将被覆盖。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.mixin-1</span>() &#123;</div><div class="line">	<span class="variable">@width:</span> <span class="number">100px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.mixin-2</span>(<span class="variable">@x</span>, <span class="variable">@y</span>) &#123;</div><div class="line">	<span class="variable">@sum:</span> <span class="variable">@x</span> + <span class="variable">@y</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.mixin-3</span>() &#123;</div><div class="line">	<span class="variable">@size:</span> in-mixin;</div><div class="line">    <span class="variable">@inSize:</span> in-mixin;</div><div class="line">&#125;</div><div class="line"><span class="variable">@size:</span> globle;</div><div class="line"></div><div class="line"><span class="selector-class">.caller-1</span> &#123;</div><div class="line">	<span class="selector-class">.mixin-1</span>();</div><div class="line">	<span class="attribute">width</span>: <span class="variable">@width</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.caller-2</span> &#123;</div><div class="line">	<span class="selector-class">.mixin-2</span>(<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">    <span class="attribute">paddind</span>: <span class="variable">@sum</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.caller-3</span> &#123;</div><div class="line">	<span class="selector-class">.mixin-3</span>();</div><div class="line">	<span class="attribute">padding</span>: <span class="variable">@size</span> <span class="variable">@inSize</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译结果<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.caller-1</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.caller-2</span> &#123;</div><div class="line">  <span class="attribute">paddind</span>: <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.caller-3</span> &#123;</div><div class="line">  <span class="attribute">padding</span>: in-mixin in-mixin;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="important关键字"><a href="#important关键字" class="headerlink" title="!important关键字"></a>!important关键字</h3><p>在调用的混合集后面追加<code>!important</code>关键字可以使混合集里面的所有属性都继承<code>!important</code></p>
<h3 id="arguments变量"><a href="#arguments变量" class="headerlink" title="@arguments变量"></a>@arguments变量</h3><p><code>@arguments</code>包含所有传入的参数</p>
<h3 id="rest变量"><a href="#rest变量" class="headerlink" title="@rest变量"></a>@rest变量</h3><p>当传递不定参时用，待深入。。。</p>
<hr>
<h2 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>(rect, <span class="variable">@num</span>) &#123;</div><div class="line">	<span class="attribute">border-width</span>: <span class="variable">@num</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box</span>(circle, <span class="variable">@num</span>) &#123;</div><div class="line">	<span class="attribute">border-radius</span>: <span class="variable">@num</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box</span>(<span class="variable">@all</span>, <span class="variable">@num</span>) &#123;</div><div class="line">	<span class="attribute">display</span>: block;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box</span>(<span class="variable">@num</span>) &#123;</div><div class="line">	<span class="attribute">font-size</span>: <span class="variable">@num</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.test1</span> &#123;</div><div class="line">	<span class="selector-class">.box</span>(rect, <span class="number">2px</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="variable">@switch:</span> circle;</div><div class="line"><span class="selector-class">.test2</span> &#123;</div><div class="line">	<span class="selector-class">.box</span>(<span class="variable">@switch</span>, <span class="number">3px</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译后：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.test1</span> &#123;</div><div class="line">  <span class="attribute">border-width</span>: <span class="number">2px</span>;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.test2</span> &#123;</div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="导入准则"><a href="#导入准则" class="headerlink" title="导入准则"></a>导入准则</h2><p>Less不关心<code>@import</code>语句的位置。</p>
<h3 id="文件扩展名"><a href="#文件扩展名" class="headerlink" title="文件扩展名"></a>文件扩展名</h3><p><code>@import</code>语句会通过依赖文件扩展名的方式区别对待不同的文件：</p>
<ul>
<li>如果文件有一个<code>.css</code>扩展名，编译后语句保持不变</li>
<li>如果没有扩展名或其他扩展名，默认为<code>.less</code>，编译后不显示</li>
</ul>
<h3 id="导入选项"><a href="#导入选项" class="headerlink" title="导入选项"></a>导入选项</h3><p>语法：<code>@import (keyword) &quot;filename&quot;;</code></p>
<p><code>keyword</code>的值：</p>
<ul>
<li><code>reference</code>：使用Less文件但不输入</li>
<li><code>inline</code>：在输出中包含源文件但不加工</li>
<li><code>less</code>：将文件作为Less文件对象</li>
<li><code>css</code>：将文件作为css文件对象</li>
<li><code>once</code>：只包含文件一次（默认行为）</li>
<li><code>multiple</code>：包含文件多次</li>
</ul>
<hr>
<h2 id="Mixin-Guards哨兵？？？"><a href="#Mixin-Guards哨兵？？？" class="headerlink" title="Mixin Guards哨兵？？？"></a>Mixin Guards哨兵？？？</h2><h3 id="when关键字"><a href="#when关键字" class="headerlink" title="when关键字"></a>when关键字</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.mixin</span> (<span class="variable">@a</span>) <span class="keyword">when</span> (lightness(<span class="variable">@a</span>) &gt;= <span class="number">50%</span>) &#123;</div><div class="line">  <span class="attribute">background-color</span>: black;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.mixin</span> (<span class="variable">@a</span>) <span class="keyword">when</span> (lightness(<span class="variable">@a</span>) &lt; <span class="number">50%</span>) &#123;</div><div class="line">  <span class="attribute">background-color</span>: white;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.mixin</span> (<span class="variable">@a</span>) &#123;</div><div class="line">  <span class="attribute">color</span>: <span class="variable">@a</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// lightness()是Less的一个函数</span></div><div class="line"><span class="selector-class">.class1</span> &#123; <span class="selector-class">.mixin</span>(<span class="number">#ddd</span>) &#125;</div><div class="line"><span class="selector-class">.class2</span> &#123; <span class="selector-class">.mixin</span>(<span class="number">#555</span>) &#125;</div></pre></td></tr></table></figure>
<p>编译后：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.class1</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: black;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#ddd</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.class2</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: white;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#555</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="true关键字"><a href="#true关键字" class="headerlink" title="true关键字"></a>true关键字</h3><p><code>true</code>是唯一真值。不要和JavaScript那些搞混啦~</p>
<h3 id="Guard逻辑运算符"><a href="#Guard逻辑运算符" class="headerlink" title="Guard逻辑运算符"></a>Guard逻辑运算符</h3><p><code>and</code>关键字：逻辑与<br>逗号<code>,</code>或<code>or</code>关键字：逻辑或<br><code>not</code>关键字：逻辑非<br>示例：.mixin (@a) when (isnumber(@a)) and (@a &gt; 0) { … }    // 注意关键字没有放在括号内</p>
<h3 id="类型检查函数"><a href="#类型检查函数" class="headerlink" title="类型检查函数"></a>类型检查函数</h3><p>基本的类型检查函数：</p>
<ul>
<li><code>iscolor</code></li>
<li><code>isnumber</code><ul>
<li>ispixel</li>
<li>ispercentage</li>
<li>isem</li>
<li>isunit</li>
</ul>
</li>
<li><code>isstring</code></li>
<li><code>iskeyword</code></li>
<li><code>isurl</code></li>
</ul>
<hr>
<h2 id="父级选择器"><a href="#父级选择器" class="headerlink" title="父级选择器"></a>父级选择器</h2><p><code>&amp;</code>运算符表示一个嵌套规则的父级选择器。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">a</span> &#123;</div><div class="line">  &amp;:hover &#123;</div><div class="line">    <span class="attribute">color</span>: green;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.button</span> &#123;</div><div class="line">  &amp;-btn &#123;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">等价于</div><div class="line"><span class="selector-tag">a</span> :hover &#123;</div><div class="line">  <span class="attribute">color</span>: green;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.button-btn</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="amp-的重复使用"><a href="#amp-的重复使用" class="headerlink" title="&amp;的重复使用"></a>&amp;的重复使用</h3><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.box-<span class="number">1</span> &#123;</div><div class="line">	&amp; + &amp; &#123;&#125;</div><div class="line">    &amp; &amp; &#123;&#125;</div><div class="line">    &amp;&amp; &#123;&#125;</div><div class="line">    &amp;, &amp;<span class="number">23</span> &#123;&#125;</div><div class="line">&#125;</div><div class="line">.box-<span class="number">2</span> &#123;</div><div class="line">	.box-<span class="number">3</span> &#123;</div><div class="line">    	&amp; &gt; &amp; &#123;&#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>等价于<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box-1</span> + <span class="selector-class">.box-1</span> &#123;&#125;</div><div class="line"><span class="selector-class">.box-1</span> <span class="selector-class">.box-1</span> &#123;&#125;</div><div class="line"><span class="selector-class">.box-1</span><span class="selector-class">.box-1</span> &#123;&#125;</div><div class="line"><span class="selector-class">.box-1</span>, <span class="selector-class">.box-123</span> &#123;&#125;</div><div class="line"><span class="selector-class">.box-2</span> <span class="selector-class">.box-3</span> &gt; <span class="selector-class">.box-2</span> <span class="selector-class">.box-3</span> &#123;&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Less </tag>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git使用中遇到的错误]]></title>
      <url>http://ChunlLing.github.io.com/2017/03/14/git%E4%BD%BF%E7%94%A8%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%94%99%E8%AF%AF/</url>
      <content type="html"><![CDATA[<p>用以记录在使用git时遇到的错误方便自查~</p>
<hr>
<p>使用<code>git push</code>或<code>git push origin master</code>（向远程仓库提交）时遇到错误：<br>    <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">To <span class="keyword">https</span>://github.com/XXXX/XXXX.git</div><div class="line"> ! [rejected]        master -&gt; master (fetch <span class="keyword">first</span>)</div><div class="line">error: failed <span class="built_in">to</span> push some refs <span class="built_in">to</span> <span class="string">'https://github.com/XXXX/XXXX.git'</span></div><div class="line">hint: Updates were rejected because <span class="keyword">the</span> remote <span class="keyword">contains</span> work that you <span class="built_in">do</span></div><div class="line">hint: <span class="keyword">not</span> have locally. This is usually caused <span class="keyword">by</span> another repository pushing</div><div class="line">hint: <span class="built_in">to</span> <span class="keyword">the</span> same ref. You may want <span class="built_in">to</span> <span class="keyword">first</span> integrate <span class="keyword">the</span> remote changes</div><div class="line">hint: (e.g., <span class="string">'git pull ...'</span>) <span class="keyword">before</span> pushing again.</div><div class="line">hint: See <span class="keyword">the</span> <span class="string">'Note about fast-forwards'</span> <span class="keyword">in</span> <span class="string">'git push --help'</span> <span class="keyword">for</span> details.</div></pre></td></tr></table></figure></p>
<p>原因：远程仓库中的master分支（假设仅有一个master分支）有新的提交而本地仓库没有更新同步到这个提交，所以本地仓库向远程仓库推送提交的时候会报出这个错误。解决的方法是先把远程仓库的提交抓取下来再提交。<br>    <figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>git pull</div><div class="line"><span class="variable">$ </span>git push</div></pre></td></tr></table></figure></p>
<p>注意：<code>git pull</code>会提示”Please enter a commit message to explain why this merge is necessary, especially if it merges an updated upstream into a topic branch。”，意思是输入可以描述此次合并分支的提交信息。可以选择写也可以不写，然后按下<code>Esc</code>键输入<code>:wq</code>（强制性写入文件并退出），按下<code>Enter</code>就可以了。</p>
]]></content>
      
        
        <tags>
            
            <tag> git </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IFE热身题-小球吃星星]]></title>
      <url>http://ChunlLing.github.io.com/2017/03/13/IFE%E7%83%AD%E8%BA%AB%E9%A2%98-%E5%B0%8F%E7%90%83%E5%90%83%E6%98%9F%E6%98%9F/</url>
      <content type="html"><![CDATA[<p>　　下午做的四道题，觉得第四道hin有趣，又玩了几遍，做个记录~</p>
<hr>
<p>　　先看下题目<br>    <img src="http://ommn78ss1.bkt.clouddn.com/static/images/IFE%E7%83%AD%E8%BA%AB%E9%A2%98-%E5%B0%8F%E7%90%83%E5%90%83%E6%98%9F%E6%98%9F/Step4.PNG" alt="Step4"></p>
<p>　　一开始看题目简直是一脸懵逼，后来在我不断钻研下，终于从万能的网友回答中看出了些门路~~~-_-|||</p>
<p>　　根据文本框的提示<code>调用&#39;ball&#39;的api移动小球，例如&#39;ball.at(82, 46, ball =&gt; ball.turnRight())&#39;</code>大概知道这里用到的是ES6的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="external">箭头函数</a>。<code>Ctrl+Shift+I</code>调出控制面板，输入<code>console.log(ball)</code>查看ball的API，然并卵，控制器输出的是<code>Uncaught ReferenceError: ball is not defined</code>。哼，我才不会就这么死心呢。打开控制台的<code>Sources</code>面板，<code>2017/asset\js</code>文件里面竟然有3个js文件！那好吧，格式下js文件（点击左下角的<code>{}</code>），<code>Ctrl+F</code>调出查找面板，查找<code>turnRight</code>，当当当，以下就是找到的关于<code>ball</code>的几个方法。<br>    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">o.fackBall = &#123;</div><div class="line">       <span class="attr">x</span>: <span class="number">0</span>,</div><div class="line">       <span class="attr">y</span>: <span class="number">0</span>,</div><div class="line">       <span class="attr">direction</span>: <span class="string">""</span>,</div><div class="line">       <span class="attr">at</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, e, s</span>) </span>&#123;</div><div class="line">           <span class="keyword">return</span> c.at(t, e, s),</div><div class="line">           <span class="keyword">this</span></div><div class="line">       &#125;,</div><div class="line">       <span class="attr">turnLeft</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">           <span class="keyword">switch</span> (c.direction) &#123;</div><div class="line">           <span class="keyword">case</span> <span class="string">"t"</span>:</div><div class="line">               c.direction = <span class="string">"l"</span>;</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">case</span> <span class="string">"l"</span>:</div><div class="line">               c.direction = <span class="string">"b"</span>;</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">case</span> <span class="string">"b"</span>:</div><div class="line">               c.direction = <span class="string">"r"</span>;</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">case</span> <span class="string">"r"</span>:</div><div class="line">               c.direction = <span class="string">"t"</span></div><div class="line">           &#125;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">       &#125;,</div><div class="line">       <span class="attr">turnRight</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">           <span class="keyword">switch</span> (c.direction) &#123;</div><div class="line">           <span class="keyword">case</span> <span class="string">"t"</span>:</div><div class="line">               c.direction = <span class="string">"r"</span>;</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">case</span> <span class="string">"r"</span>:</div><div class="line">               c.direction = <span class="string">"b"</span>;</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">case</span> <span class="string">"b"</span>:</div><div class="line">               c.direction = <span class="string">"l"</span>;</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">case</span> <span class="string">"l"</span>:</div><div class="line">               c.direction = <span class="string">"t"</span></div><div class="line">           &#125;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">       &#125;,</div><div class="line">       <span class="attr">turnBack</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">           <span class="keyword">switch</span> (c.direction) &#123;</div><div class="line">           <span class="keyword">case</span> <span class="string">"t"</span>:</div><div class="line">               c.direction = <span class="string">"b"</span>;</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">case</span> <span class="string">"b"</span>:</div><div class="line">               c.direction = <span class="string">"t"</span>;</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">case</span> <span class="string">"l"</span>:</div><div class="line">               c.direction = <span class="string">"r"</span>;</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">case</span> <span class="string">"r"</span>:</div><div class="line">               c.direction = <span class="string">"l"</span></div><div class="line">           &#125;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">       &#125;,</div><div class="line">       <span class="attr">wait</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</div><div class="line">           <span class="keyword">return</span> c.waitStartTime = <span class="built_in">Date</span>.now(),</div><div class="line">           c.waitTime = t,</div><div class="line">           <span class="keyword">this</span></div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>　　大概看下代码，<code>turnLeft</code>是向左转，<code>turnRight</code>是向右转，<code>turnBack</code>是向后转，<code>wait</code>是使时间延迟。<br>　　那么，回来看题目。这XX我怎么知道坐标啊。再次感谢万能的网络MUA~用鼠标点击屏幕控制台会显示点击点的坐标，诺，像酱~<br>   <img src="http://ommn78ss1.bkt.clouddn.com/static/images/IFE%E7%83%AD%E8%BA%AB%E9%A2%98-%E5%B0%8F%E7%90%83%E5%90%83%E6%98%9F%E6%98%9F/position.gif" alt="position"></p>
<p>   有了坐标，有了API，那就开始动手吧<br>   在笔记上规划好路径，写下每个转折点的坐标。<br>   我的代码如下：<br>   <figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">ball.at(<span class="number">0</span>, <span class="number">46</span>, ball =&gt; ball.wait(<span class="number">1500</span>));</div><div class="line">var right = (x, y) =&gt; ball.at(x, y, ball =&gt; ball.turnRight());</div><div class="line">var left = (x, y) =&gt; ball.at(x, y, ball =&gt; ball.turnLeft());</div><div class="line">var back = (x, y) =&gt; ball.at(x, y, ball =&gt; ball.turnBack());</div><div class="line">right(<span class="number">76</span>, <span class="number">46</span>);</div><div class="line">left(<span class="number">76</span>, <span class="number">136</span>);</div><div class="line">right(<span class="number">130</span>, <span class="number">136</span>);</div><div class="line">right(<span class="number">130</span>, <span class="number">243</span>);</div><div class="line">left(<span class="number">91</span>, <span class="number">243</span>);</div><div class="line">right(<span class="number">91</span>, <span class="number">364</span>);</div><div class="line">back(<span class="number">18</span>, <span class="number">364</span>);</div><div class="line">right(<span class="number">176</span>, <span class="number">364</span>);</div><div class="line">right(<span class="number">176</span>, <span class="number">468</span>);</div><div class="line">back(<span class="number">18</span>, <span class="number">468</span>);</div><div class="line">left(<span class="number">372</span>, <span class="number">468</span>);</div><div class="line">left(<span class="number">372</span>, <span class="number">46</span>);</div><div class="line">left(<span class="number">270</span>, <span class="number">46</span>);</div><div class="line">right(<span class="number">270</span>, <span class="number">134</span>);</div><div class="line">left(<span class="number">222</span>, <span class="number">134</span>);</div><div class="line">right(<span class="number">222</span>, <span class="number">243</span>);</div><div class="line">back(<span class="number">173</span>, <span class="number">243</span>);</div><div class="line">right(<span class="number">273</span>, <span class="number">243</span>);</div><div class="line">left(<span class="number">273</span>, <span class="number">290</span>);</div><div class="line">left(<span class="number">367</span>, <span class="number">290</span>);</div><div class="line">right(<span class="number">367</span>, <span class="number">105</span>);</div><div class="line">left(<span class="number">469</span>, <span class="number">105</span>);</div><div class="line">right(<span class="number">469</span>, <span class="number">14</span>);</div><div class="line">right(<span class="number">552</span>, <span class="number">14</span>);</div><div class="line">left(<span class="number">552</span>, <span class="number">105</span>);</div><div class="line">right(<span class="number">618</span>, <span class="number">105</span>);</div><div class="line">right(<span class="number">618</span>, <span class="number">190</span>);</div><div class="line">left(<span class="number">577</span>, <span class="number">190</span>);</div><div class="line">left(<span class="number">577</span>, <span class="number">473</span>);</div></pre></td></tr></table></figure></p>
<hr>
<p>　　<br>　　 <strong>然而！！！然而！！！然而这不是我的解题过程</strong>。傻傻如我，是直接调出控制台记录每个区域块的左上顶点坐标和宽高值，所以当后来我知道可以用鼠标点击获取坐标时我就这表情/(ㄒoㄒ)/~~<br>      <img src="http://ommn78ss1.bkt.clouddn.com/static/images/IFE%E7%83%AD%E8%BA%AB%E9%A2%98-%E5%B0%8F%E7%90%83%E5%90%83%E6%98%9F%E6%98%9F/%E6%97%A0%E6%A0%87%E9%A2%98.png" alt="解题过程1"></p>
<p>　　我规划的路径是(1)-&gt;(2)-&gt;(3)-&gt;(4)-&gt;(5)-&gt;(6)-&gt;(7)-&gt;(8)-&gt;(9)-&gt;(10)-&gt;(11)-&gt;(12)-&gt;(13)-&gt;(14)-&gt;(3)-&gt;(4)-&gt;(15)-&gt;(16)-&gt;(17)-&gt;(18)-&gt;(19)-&gt;(20)-&gt;(21)-&gt;(22)-&gt;(23)-&gt;(24)-&gt;(25)-&gt;(26)<br>　　不过后来发现这里有个坑：小球经过同个点的时候只能有一种行为，比方说上面的规划路径(3)、(4)是定义了两次，那么实际上小球在这两个点上最终的行为是以后定义的为准的，而我在这两个点定义的两次方向是相反的，所以小球第一次经过(3)点的时候就报错了。解决的方法有两个：1. 定义一个附近的点，但要注意这个点之前不会经过；2. 重新规划一条路线。我这里选择了重新规划路线，最终流程图是这样的：<br>      <img src="http://ommn78ss1.bkt.clouddn.com/static/images/IFE%E7%83%AD%E8%BA%AB%E9%A2%98-%E5%B0%8F%E7%90%83%E5%90%83%E6%98%9F%E6%98%9F/%E6%97%A0%E6%A0%87%E9%A2%98%20-%20%E5%89%AF%E6%9C%AC.png" alt="解题过程2"></p>
<p>　　应该会有更优的方案，这里没有做对比。最后运行结果如图：<br>      <img src="http://ommn78ss1.bkt.clouddn.com/static/images/IFE%E7%83%AD%E8%BA%AB%E9%A2%98-%E5%B0%8F%E7%90%83%E5%90%83%E6%98%9F%E6%98%9F/IFE_ball.gif" alt="运行结果"></p>
<p>　　关于小球运动后的两颗星星如何吃到。可以在前面加上<code>ball.at(0, 46, ball =&gt; ball.wait(1500));</code>，让小球先等一会再动。</p>
<p>　　总结：<strong>知无涯</strong>。当学习到的越多，就会越加意识到先前的浅薄无知，所以，保持虚心。在知乎看过一个关于前端的回答：前端的学习是先平缓后陡峭再平缓的，也许现在的我就在这陡峭的山脚下，但，我是一个喜欢爬上山顶看风景的人~</p>
]]></content>
      
        
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES6 </tag>
            
            <tag> 测试题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript基础笔记]]></title>
      <url>http://ChunlLing.github.io.com/2017/03/12/Javascript%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h1 id="JavaScript简介"><a href="#JavaScript简介" class="headerlink" title="JavaScript简介"></a>JavaScript简介</h1><p>一个完整的JavaScript实现 = 核心（ECMAScript） + 文档对象模型（DOM） + 浏览器对象模型（BOM）</p>
<h3 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h3><p>　　由ECMA-262定义的EAMAScript的组成部分：语法、类型、语句、关键字、保留字、操作符、对象。ECMAScript与Web浏览器没有依赖关系。实际上，这门语言本身并不包含输入和输出定义。</p>
<h3 id="文档对象模型（DOM）"><a href="#文档对象模型（DOM）" class="headerlink" title="文档对象模型（DOM）"></a>文档对象模型（DOM）</h3><p>　　文档对象模型（DOM,Document Object Model）是针对XML但经过扩展用于HTML的应用程序编程接口（API,Application Programming Interface）。DOM把整个页面映射为一个多层节点结构。HTML或XML页面中的每个组成部分都是某种类型的节点，这些节点包含着不同类型的数据。</p>
<p>　　DOM1级（DOM Level1）组成模块：DOM核心（DOM Core）和DOM HTML。</p>
<p>　　DOM2级引入新模块：</p>
<pre><code>- DOM视图（DOM View）：定义论文跟踪不同文档视图的接口；
- DOM事件（DOM Events）：定义了事件和事件处理的接口；
- DOM样式（DOM Style）：定义了基于CSS为元素应用样式的接口；
- DOM遍历和范围（DOM Traversal and Range）：定义了遍历和操作文档树的接口。
</code></pre><p>　　DOM3级进一步扩展DOM：</p>
<pre><code>- 引入了以统一方式加载和保存文档的方法－－在DOM加载和保存（DOM Load and Sava）模块中定义；
- 新增了验证文档的方法－－在DOM验证（DOM Validation）模块中定义。
</code></pre><h3 id="浏览器对象模型（BOM）"><a href="#浏览器对象模型（BOM）" class="headerlink" title="浏览器对象模型（BOM）"></a>浏览器对象模型（BOM）</h3><p>　　提供与浏览器交互的方法和接口。</p>
<hr>
<h1 id="在HTML中使用JavaScript"><a href="#在HTML中使用JavaScript" class="headerlink" title="在HTML中使用JavaScript"></a>在HTML中使用JavaScript</h1><h2 id="script元素"><a href="#script元素" class="headerlink" title="script元素"></a>script元素</h2><p><code>&lt;script&gt;</code>元素定义了下列6个属性：</p>
<ul>
<li>async：可选。表示应该立即下载脚本，但不应妨碍页面中的其他操作，比如下载其他资源或等待加载其他脚本，只对外部脚本文件有效。</li>
<li>charset：可选。表示通过<code>src</code>属性指定的代码的字符集。较少使用。</li>
<li>defer：可选。表示脚本可以延迟到文档完全被解析和显示之后再执行。只对外部脚本文件有效。</li>
<li>language：已废弃。原来用于表示编写代码使用的脚本语言（如JavaScript、JavaScript1.2或VBScript）</li>
<li>src：可选。表示包含要执行代码的外部文件。</li>
<li>type：可选。可以看成是<code>language</code>的替代属性；表示编写代码使用的脚本语言的内容类型（也称为MIME类型）。虽然<code>text/javascript</code>和<code>text/ecmascript</code>都已经不被推荐使用，但人们一直以来使用的都还是<code>text/javascript</code>。实际上，服务器在传送JavaScript文件是使用的MIME类型通常是<code>application/x-javascript</code>，但在type中设置这个值却可能导致脚本被忽略。另外，在非IE浏览器中还可以使用以下值：<code>application/javascript</code>和<code>application/ecmascript</code>。考虑到约定俗成和最大限度的浏览器兼容性，目前type属性的值依旧是<code>text/javascript</code>。不过，这个属性并不是必需的，如果没有指定这个属性，则其默认值仍为<code>text/javascript</code>。</li>
</ul>
<p>按照惯例，外部JavaScript文件带有.js扩展名。但这个扩展名不是必需的，因为浏览器不会检查包含JavaScript的文件1的扩展名。这样一来，使用JSP、PHP或者其他服务端语言动态生成JavaScript代码也就成为了可能。但是，服务器通常还是需要看扩展名决定为响应应用哪种MIME类型。如果不使用.js扩展名，需确保服务器能返回正确的MIME类型。</p>
<p>延迟脚本两种方式：</p>
<ol>
<li>将延迟脚本放在页面底部。</li>
<li>使用<code>defer</code>属性。HTML5规范要求脚本按照它们出现的先后顺序执行，因此第一个延迟脚本会先于第二个延迟脚本执行，而这两个脚本会先于<code>DOMContentLoaded</code>事件执行。在显示当中，延迟脚本并不一定会按照顺序执行，也不一定会在<code>DOMContentLoaded</code>事件触发前执行，因此最好只包含一个延迟脚本。支持HTML5的实现会忽略给嵌入脚本设置的<code>defer</code>属性。</li>
</ol>
<p>异步脚本：<br><code>async</code>标记的脚本并不保证按照指定它们的先后顺序执行。指定<code>async</code>属性的目的是不让页面等待连个脚本下载和执行，从而异步加载页面其他内容。异步脚本一定会在页面的<code>load</code>事件前执行，但可能在<code>DOMContentLoaded</code>事件触发之前或之后执行。</p>
<h2 id="noscript元素"><a href="#noscript元素" class="headerlink" title="noscript元素"></a>noscript元素</h2><p><code>&lt;noscript&gt;</code>用以在不支持JavaScript的浏览器中显示替代的内容。只有在以下两个情况下灰起作用：</p>
<ul>
<li>浏览器不支持脚本</li>
<li>浏览器支持脚本，但脚本被禁止</li>
</ul>
<hr>
<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><p>Javascript区分大小写。</p>
<p>标识符命名规则：</p>
<ul>
<li>第一个字符必须是一个字母、下划线<code>_</code>或一个美元符号<code>$</code></li>
<li>其他字符可以是字母、下划线、美元符号或数字</li>
<li>不能把关键字、保留字、true、false和null作为标识符</li>
</ul>
<table>
<thead>
<tr>
<th>ECMAScript全部关键字</th>
</tr>
</thead>
<tbody>
<tr>
<td>break</td>
<td>case</td>
<td>catch</td>
<td>continue</td>
<td>default</td>
</tr>
<tr>
<td>delete</td>
<td>do</td>
<td>else</td>
<td>finally</td>
<td>for</td>
</tr>
<tr>
<td>function</td>
<td>if</td>
<td>in</td>
<td>instanceof</td>
<td>new</td>
</tr>
<tr>
<td>return</td>
<td>switch</td>
<td>this</td>
<td>throw</td>
<td>try</td>
</tr>
<tr>
<td>typeof</td>
<td>var</td>
<td>void</td>
<td>while</td>
<td>with</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>ECMA-262第三版全部保留字</th>
</tr>
</thead>
<tbody>
<tr>
<td>abstract</td>
<td>boolean</td>
<td>byte</td>
<td>char</td>
<td>class</td>
<td>const</td>
<td>debugger</td>
</tr>
<tr>
<td>double</td>
<td>enum</td>
<td>export</td>
<td>extends</td>
<td>final</td>
<td>float</td>
<td>goto</td>
</tr>
<tr>
<td>implements</td>
<td>import</td>
<td>int</td>
<td>interface</td>
<td>long</td>
<td>native</td>
</tr>
<tr>
<td>package</td>
<td>private</td>
<td>protected</td>
<td>public</td>
<td>short</td>
<td>static</td>
</tr>
<tr>
<td>super</td>
<td>synchronized</td>
<td>throws</td>
<td>transient</td>
<td>volatile</td>
</tr>
</tbody>
</table>
<p>注释：<code>//</code>单行注释 | <code>/* */</code>多行注释</p>
<p>Javascript的每个语句以<code>;</code>结束，语句块用<code>{}</code>。<br>虽然Javascript不强制使用<code>;</code>，不过始终补上<code>;</code>是一个良好的习惯。<br>可选分号通用规则：如果当前语句和下一行语句无法合并解析，Javascrpt则在第一行后填补分号。<br>示例：</p>
<figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">var</span> a</div><div class="line">a</div><div class="line">=</div><div class="line"><span class="number">3</span></div><div class="line">console.log(a)</div></pre></td></tr></table></figure>
<p>等价于<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var a<span class="comment">;</span></div><div class="line"><span class="attribute">a</span> = <span class="number">3</span><span class="comment">;</span></div><div class="line">console.log(a)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>两个例外：</p>
<ol>
<li><p>如果<code>return</code>、<code>break</code>和<code>continue</code>后紧跟着换行，则会在换行处填补分号。<br> 示例：</p>
 <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span></div><div class="line"><span class="literal">true</span></div></pre></td></tr></table></figure>
<p> 等价于</p>
 <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span>;</div><div class="line"><span class="literal">true</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>如果将<code>++</code>或<code>--</code>用做后缀表达式，应当和表达式在同一行，否则行尾自动填补分号。<br> 示例：</p>
 <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="section">x</span></div><div class="line">++</div><div class="line">y</div></pre></td></tr></table></figure>
<p> 等价于</p>
 <figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">x<span class="comment">;</span></div><div class="line">++y<span class="comment">;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>赋值语句：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">var x</span> = 0;</div></pre></td></tr></table></figure></p>
<p>字符串也可以视为完整的语句<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"Hello World!"</span></div></pre></td></tr></table></figure></p>
<p>注意如果字符串不用<code>&#39;&#39;</code>或<code>&quot;&quot;</code>包裹会抛出<code>ReferenceError（引用错误）</code>。</p>
<hr>
<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="原始类型（primitive-type）"><a href="#原始类型（primitive-type）" class="headerlink" title="原始类型（primitive type）"></a>原始类型（primitive type）</h2><ul>
<li>Number<br>  包含两种数值：整数和浮点数。<br>  八进制数值字面量：前导为<code>0</code><br>  十六进制数值字面量：前导为<code>0x</code><br>  浮点类型数值包含一个小数点，且小数点后面必须至少有一位数字。由于保存浮点数值需要的内存空间比整数型数值大两倍，如果浮点数值小数点后没有数字或数字都为0会自动转化为整型。<br>  对于过大或过小的数值可以用科学表示法<code>e表示法</code>，用e表示该数值的前面数值的10的指数次幂。浮点数值的范围在：<code>Number.MIN_VALUE</code>到<code>Number.MAX_VALUE</code>之间。如果超过了浮点数值范围的最大值或最小值，则会出现<code>Infinity（正无穷）</code>或<code>-Infinity（负无穷）</code>。<br>  <code>isFinite()</code>函数可以确定一个数值是否超过了规定范围，没有超过返回<code>true</code>，超过返回<code>false</code>。<br>  <code>NaN</code>即Not a Number，用于表示一个本来要返回数值的操作数未返回数值的情况（这样就不回抛出错误）。<code>NaN</code>与任何值都不相等，包括它自身。<br>  判别一个字面量x是否为<code>NaN</code>有两种方式：<code>x != x</code> 或者 <code>isNaN(x)</code> 。注意，<code>isNaN(true)</code>会返回<code>false</code>，因为<code>true</code>会被转换为数字1。<br>  非数值转化为数值：<code>Number()</code>、<code>parseInt()</code>、<code>parseFloat()</code></li>
<li>String<br>  用于表示由零或多个16位Unicode字符组成的字符串。<br>  <code>String</code>类型包含了一些特殊的字符字面量，也叫转义序列。<br>  | 字面量 | 含义 |<br>  |——–|——–|<br>  |   \n     | 换行       |<br>  |   \t     | 制表       |<br>  |   \b     | 空格       |<br>  |   \r     | 回车       |<br>  |   \f     | 进制       |<br>  |   \     | 斜杠       |<br>  |   \’     | 单引号       |<br>  |   \”     | 双引号       |<br>  |   \xnn    | 以十六进制代码nn表示一个字符（0~F）。例：\x41       |<br>  |   \unnnn     | 以十六进制代码nnn表示的一个Unicode字符（0~F）。例：\u03a0       |</li>
<li>Boolean<br>  有两个值：<code>true</code>和<code>false</code>。而<code>true</code>不一定等于1，<code>false</code>不一定等于0.由于JavaScript区分大小写，所以<code>TRUE</code>和<code>FALSE</code>或其他不是Boolean类型的值。<br>  其他类型转换成Boolean类型规则：<img src="http://ommn78ss1.bkt.clouddn.com/static/images/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/%E5%85%B6%E4%BB%96%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2Boolean.png" alt="其他类型转换成Boolean类型规则"></li>
<li>NULL<br>  只用一个值<code>null</code>。表示一个空对象引用（指针）。使用<code>typeof</code>操作符检测<code>null</code>会返回<code>object</code></li>
<li>Undefined<br>  只有一个值<code>undefined</code>。在使用<code>var</code>声明变量但没有对其初始化时，这个变量的值就是<code>undefined</code><br>  对于未初始化的变量与未声明的变量，使用<code>typeof</code>操作符时都是返回<code>undefined</code>。从逻辑上而言，前者的值是<code>undefined</code>，而后者是<code>ReferenceError（引用错误）</code></li>
</ul>
<h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><p>在ECMAScript中，引用类型是一种数据结构，用于将数据和功能组织在一起。</p>
<h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><p>原始值是 <em>不可更改</em> 的；原始值得比较是 <em>值</em> 的比较。<br>对象值是 <em>可修改</em> 的；对象的比较是 <em>引用</em> 的比较。</p>
<p><strong>typeof</strong>操作符：用来检测变量的数据类型</p>
]]></content>
      
        
        <tags>
            
            <tag> JS </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[停一下，再奔跑]]></title>
      <url>http://ChunlLing.github.io.com/2017/03/11/%E5%81%9C%E4%B8%80%E4%B8%8B%EF%BC%8C%E5%86%8D%E5%A5%94%E8%B7%91/</url>
      <content type="html"><![CDATA[<p>　　去掉修改论文和修复u盘以及其他杂务，差不多花了3天的时间折腾博客。虽然不快，从什么都不懂到看教程查文档大概能了解npm、git、hexo配置，在看到网页的效果一点一点的呈现出来的时候，还是小有成就感的，就像小时候课堂上完成作业被老师奖励小红花一样。<br>　　刚看到一句话</p>
<blockquote>
<p>　　每个人都应该拥有属于自己的想象世界，即使那个世界再可笑再荒谬。—— 朱德庸</p>
</blockquote>
<p>　　真巧，正是我心里所想。<br>　　小学、中学、大学，就像是一条既定的路线，沿着它走下去就对了。可是，毕业后呢？幸好，上大学后开始琢磨啥样的人生才是自己追求的。回忆起来，大一应该是最悠闲的时光吧。刚步入大学的校园，周围一起都是新奇的。来自四面八方的朋友，相对以前更自由的学习方式…那会在家人的帮助下，鼓捣着一间淘宝店，然而无意经营，却迷上了技术。那时也才刚接触计算机，能熟练的操作仅限于开机和关机，以及拆电池[捂脸.jpg]。从安装校园网客户端、用word制作传单一点一点慢慢积累基础的计算机操作，到后来饭上PS，“怂恿”自己参加平面设计比赛、大过年的躲在家P出游图-_-|||，再到现在恋上敲代码，不停的挖坑，也不停的填坑，每天都在收获新知识。因为喜欢而去坚持，感觉真幸运。<br>　　临近毕业，感觉像是突然间要成长的小孩，找工作、充实技能，迈出校园的大门，就要学会独当一面啦(๑•̀ㅂ•́)و✧<br>　　前几天和侄女通话，竟然聊了差不多一个小时，寡言如我每次和小孩子却能聊个没完。侄女问我以后想当什么呀，没法向侄女解释什么是程序猿，所以我开玩笑说我想做猴子。那小家伙在电话那边笑个不停，说姑姑想当猴子这太好笑了，然后又说她想做一棵树。哈哈哈莫名的小感动~<br>　　昨天拍的一张图，中区突然建起了这么一座楼，我以为我可能上了一学期的假课|(*′口`)<br>　　<img src="http://ommn78ss1.bkt.clouddn.com/static/images/%E5%81%9C%E4%B8%80%E4%B8%8B%EF%BC%8C%E5%86%8D%E5%A5%94%E8%B7%91/modify.jpg" alt="中区篮球场"><br>　　稍微修了一下，发觉还不错【快！夸！我！(‾◡◝)】<br>　　<img src="http://ommn78ss1.bkt.clouddn.com/static/images/%E5%81%9C%E4%B8%80%E4%B8%8B%EF%BC%8C%E5%86%8D%E5%A5%94%E8%B7%91/original.jpg" alt=""><br>　　现在是2017年3月11日1点11分，已不太记得是第几个超过0点的夜晚了。晚安~</p>
]]></content>
      
        
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[小白爱折腾之hexo+GitHub搭建个人博客]]></title>
      <url>http://ChunlLing.github.io.com/2017/03/08/%E5%B0%8F%E7%99%BD%E7%88%B1%E6%8A%98%E8%85%BE%E4%B9%8Bhexo-GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p>非教程帖，仅做挖坑记录和反思   </p>
<h1 id="前期准备："><a href="#前期准备：" class="headerlink" title="前期准备："></a>前期准备：</h1><ul>
<li>安装git</li>
<li>安装node.js</li>
<li>安装hexo</li>
<li>申请GitHub账号</li>
</ul>
<h1 id="搭建步骤："><a href="#搭建步骤：" class="headerlink" title="搭建步骤："></a>搭建步骤：</h1><p>1 创建仓库：用户名.github.io</p>
<p>2 在本地指定根目录输入命令（cmd或git）：hexo init 用户名.github,io<br>结果： 生成“用户名.github,io”文件夹</p>
<p><strong>文件结构树：</strong></p>
<ul>
<li>用户名.github,io<ul>
<li>node_mdules</li>
<li>scaffolds</li>
<li>source        [资源文件]</li>
<li>themes        [主题文件]</li>
<li>.gitgnore</li>
<li>_config.yml    [站点配置文件]</li>
<li>package.json    [应用程序数据]</li>
</ul>
</li>
</ul>
<p>3 在“用户名.github,io”根目录输入命令（cmd或git）：hexo s，在浏览器输入localhost:4000</p>
<p>至此，初级搭建成功。</p>
<p>本地预览： <code>hexo s</code>或<code>hexo server</code></p>
<hr>
<h1 id="进阶-写博客："><a href="#进阶-写博客：" class="headerlink" title="进阶-写博客："></a>进阶-写博客：</h1><p>创建新文章： <code>hexo new &quot;文章标题&quot;</code> （存在source_posts目录中）</p>
<p>创建草稿： <code>hexo new draft &quot;文章标题&quot;</code> （会在source文件夹中新建一个文件夹“_drafts”）<br>发布草稿： <code>hexo publish &quot;文章标题&quot;</code> （会将存在source_drafts的草稿发布到”_posts”文件夹中）</p>
<p>安装自动部署发布工具：<code>hexo-deployer-git</code><br>没安装的后果就是后面<code>hexo d</code>会出现 “cannot found git” 的错误</p>
<p>清除缓存：<code>hexo clean</code><br>生成静态文件：<code>hexo generate</code>或<code>hexo g</code><br>部署到git上：<code>hexo deploy</code>或<code>hexo d</code></p>
<hr>
<h1 id="进阶-更换主题："><a href="#进阶-更换主题：" class="headerlink" title="进阶-更换主题："></a>进阶-更换主题：</h1><p>到<a href="https://hexo.io/themes/" target="_blank" rel="external">Hexo</a>选择喜欢的主题。这里选了<a href="https://github.com/MOxFIVE/hexo-theme-yelee" target="_blank" rel="external">Yelee</a>这个主题。<br><a href="http://moxfive.coding.me/yelee/" target="_blank" rel="external">Yelee安装教程</a>。教程很详细，这里就不细述了b(￣▽￣)d</p>
<p>趁着还有半小时断网，再试一个主题<a href="http://luuman.github.io/2015/12/27/Hexo/HexoTheme/" target="_blank" rel="external">Hexo 主题：SPFK</a></p>
<p>最后本博客选择Yelee和SPFK两个主题混搭。主要用了SPFK的样式，但用了Yelee的一些配置。</p>
<h2 id="站点Swiftype搜索框"><a href="#站点Swiftype搜索框" class="headerlink" title="站点Swiftype搜索框"></a><strong>站点Swiftype搜索框</strong></h2><ol>
<li><p>目标文件：<code>\themes\spfk\source\css\_partial</code><br> 操作：添加文件【添加<code>\themes\yelee\source\css\_partial</code>目录下的<code>search.styl</code>文件】</p>
</li>
<li><p>目标文件：<code>\themes\spfk\source\js\_partial</code><br> 操作：添加文件【添加<code>\themes\yelee\source\js\_partial</code>目录下的<code>search.js</code>文件】</p>
</li>
<li><p>目标文件：<code>\themes\spfk\layout\_partial\left-col.ejs</code><br> 操作：替换代码【将第一段代码替换成第二段代码】</p>
 <figure class="highlight erb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> <span class="keyword">if</span> (theme.search_box)&#123; </span><span class="xml"><span class="tag">%&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"st-default-search-input search"</span> <span class="attr">id</span>=<span class="string">"search"</span> <span class="attr">placeholder</span>=<span class="string">" Search..."</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span></span><span class="ruby">&#125;</span><span class="xml"><span class="tag">%&gt;</span></span></div></pre></td></tr></table></figure>
 <figure class="highlight erb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> <span class="keyword">if</span> (theme.search.on)&#123; </span><span class="xml"><span class="tag">%&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"search-form"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"local-search-input"</span> <span class="attr">name</span>=<span class="string">"q"</span> <span class="attr">placeholder</span>=<span class="string">"search..."</span> <span class="attr">class</span>=<span class="string">"search form-control"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">autocorrect</span>=<span class="string">"off"</span> <span class="attr">searchonload</span>=<span class="string">"&lt;%=</span></span><span class="ruby"> theme.search.onload </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span> /&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-times"</span> <span class="attr">onclick</span>=<span class="string">"resetSearch()"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"local-search-result"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">'no-result'</span>&gt;</span>No results found <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">'fa fa-spinner fa-pulse'</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span></span><span class="ruby">&#125;</span><span class="xml"><span class="tag">%&gt;</span></span></div></pre></td></tr></table></figure>
</li>
<li><p>目标文件：<code>\themes\spfk\source\js\pc.js</code><br> 操作：添加代码【添加到<code>define([], function(){})</code>的<code>function</code>里面<code>return</code>之前】</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (yiliaConfig.search) &#123;</div><div class="line">    <span class="keyword">var</span> search = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">require</span>([yiliaConfig.rootUrl + <span class="string">'js/search.js'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> inputArea = <span class="built_in">document</span>.querySelector(<span class="string">"#local-search-input"</span>);</div><div class="line">            <span class="keyword">var</span> $HideWhenSearch = $(<span class="string">"#toc, #tocButton, .post-list, #post-nav-button a:nth-child(2)"</span>);</div><div class="line">            <span class="keyword">var</span> $resetButton = $(<span class="string">"#search-form .fa-times"</span>);</div><div class="line">            <span class="keyword">var</span> $resultArea = $(<span class="string">"#local-search-result"</span>);</div><div class="line"></div><div class="line">            <span class="keyword">var</span> getSearchFile = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> search_path = <span class="string">"search.xml"</span>;</div><div class="line">                <span class="keyword">var</span> path = yiliaConfig.rootUrl + search_path;</div><div class="line">                searchFunc(path, <span class="string">'local-search-input'</span>, <span class="string">'local-search-result'</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">var</span> getFileOnload = inputArea.getAttribute(<span class="string">'searchonload'</span>);</div><div class="line">            <span class="keyword">if</span> (yiliaConfig.search &amp;&amp; getFileOnload === <span class="string">"true"</span>) &#123;</div><div class="line">                getSearchFile();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                inputArea.onfocus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; getSearchFile() &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">var</span> HideTocArea = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                $HideWhenSearch.css(<span class="string">"visibility"</span>,<span class="string">"hidden"</span>);</div><div class="line">                $resetButton.show();</div><div class="line">            &#125;</div><div class="line">            inputArea.oninput = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; HideTocArea() &#125;</div><div class="line">            inputArea.onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">if</span>(event.keyCode==<span class="number">13</span>) <span class="keyword">return</span> <span class="literal">false</span>&#125;</div><div class="line"></div><div class="line">            resetSearch = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                $HideWhenSearch.css(<span class="string">"visibility"</span>,<span class="string">"initial"</span>);</div><div class="line">                $resultArea.html(<span class="string">""</span>);</div><div class="line">                <span class="built_in">document</span>.querySelector(<span class="string">"#search-form"</span>).reset();</div><div class="line">                $resetButton.hide();</div><div class="line">                $(<span class="string">".no-result"</span>).hide();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            $resultArea.bind(<span class="string">"DOMNodeRemoved DOMNodeInserted"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (!$(e.target).text()) &#123;</div><div class="line">                    $(<span class="string">".no-result"</span>).show(<span class="number">200</span>);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                  $(<span class="string">".no-result"</span>).hide();</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &#125;)</div><div class="line">    &#125;()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>目标文件：<code>\themes\spfk\layout\_partial\after-footer.ejs&quot;</code><br> 操作：删除代码</p>
 <figure class="highlight erb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> <span class="keyword">if</span> (theme.search_box)&#123; </span><span class="xml"><span class="tag">%&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">      <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"search"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"search"</span>)</div><div class="line">            search();</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="function"><span class="keyword">function</span> <span class="title">search</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        (<span class="function"><span class="keyword">function</span>(<span class="params">w,d,t,u,n,s,e</span>)</span>&#123;w[<span class="string">'SwiftypeObject'</span>]=n;w[n]=w[n]||<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        (w[n].q=w[n].q||[]).push(<span class="built_in">arguments</span>);&#125;;s=d.createElement(t);</div><div class="line">        e=d.getElementsByTagName(t)[<span class="number">0</span>];s.async=<span class="number">1</span>;s.src=u;e.parentNode.insertBefore(s,e);</div><div class="line">        &#125;)(<span class="built_in">window</span>,<span class="built_in">document</span>,<span class="string">'script'</span>,<span class="string">'//s.swiftypecdn.com/install/v2/st.js'</span>,<span class="string">'_st'</span>);</div><div class="line"></div><div class="line">        _st(<span class="string">'install'</span>,<span class="string">'A1Pz-LKMXbrzcFg2FWi6'</span>,<span class="string">'2.0.0'</span>);</div><div class="line">      &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span></span><span class="ruby">&#125;</span><span class="xml"><span class="tag">%&gt;</span></span></div></pre></td></tr></table></figure>
</li>
<li><p>目标文件：<code>\themes\spfk\source\css\style.styl</code><br> 操作：添加代码【添加到最后防止被覆盖】</p>
 <figure class="highlight openscad"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="built_in">search</span></div><div class="line">  @<span class="built_in">import</span> <span class="string">"_partial/search"</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>上面主要是实现本地搜索功能，修改样式看个人喜好，主要修改的样式文件是：<code>\themes\spfk\source\css\_partial\main.styl</code><br>小技巧：<code>Ctrl+F</code>调出查找栏，输入“search”，对包含有这个对象的文件进行相应的修改，耐力活 =_=</p>
<h2 id="阅读全文设置"><a href="#阅读全文设置" class="headerlink" title="阅读全文设置"></a><strong>阅读全文设置</strong></h2><p><a href="https://twiceyuan.com/2014/05/25/hexo%E8%87%AA%E5%8A%A8%E6%B7%BB%E5%8A%A0readmore%E6%A0%87%E8%AE%B0/" target="_blank" rel="external">Hexo自动添加ReadMore标记</a></p>
<hr>
<h1 id="进阶-使用插件"><a href="#进阶-使用插件" class="headerlink" title="进阶-使用插件"></a>进阶-使用插件</h1><h2 id="使用七牛云"><a href="#使用七牛云" class="headerlink" title="使用七牛云"></a><strong>使用七牛云</strong></h2><ol>
<li>注册<a href="https://www.qiniu.com/" target="_blank" rel="external">七牛</a>云账号。注册完成后添加对象存储，记住空间名称，后面要用到</li>
<li>在根目录下执行：<code>npm install hexo-qiniu-sync --save</code></li>
<li><p>在站点配置文件<code>_config.yml</code>（在根目录下）中配置：</p>
 <figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 七牛云</span></div><div class="line"><span class="attr">qiniu:</span></div><div class="line"><span class="attr">  offline:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  sync:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  bucket:</span> <span class="comment">#空间名称</span></div><div class="line"><span class="comment"># secret_file: sec/qn.json or C:</span></div><div class="line"><span class="attr">  access_key:</span> <span class="comment">#七牛个人中心/密钥管理复制</span></div><div class="line"><span class="attr">  secret_key:</span> <span class="comment">#七牛个人中心/密钥管理复制</span></div><div class="line"><span class="attr">  dirPrefix:</span> static</div><div class="line"><span class="attr">  urlPrefix:</span> http://bucket_name.qiniudn.com/static</div><div class="line"><span class="attr">  up_host:</span> http://upload.qiniu.com</div><div class="line"><span class="attr">  local_dir:</span> static</div><div class="line"><span class="attr">  update_exist:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  image:</span> </div><div class="line"><span class="attr">    folder:</span> images</div><div class="line"><span class="attr">    extend:</span> </div><div class="line"><span class="attr">  js:</span></div><div class="line"><span class="attr">    folder:</span> js</div><div class="line"><span class="attr">  css:</span></div><div class="line"><span class="attr">    folder:</span> css</div></pre></td></tr></table></figure>
<p> 这里注释了secret_file: sec/qn.json or C:是因为会报错</p>
 <figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">FATAL incomplete <span class="built_in">explicit</span> mapping pair; a <span class="built_in">key</span> node <span class="built_in">is</span> missed <span class="built_in">at</span> line <span class="number">74</span>, column <span class="number">32</span>:</div><div class="line">     secret_file: <span class="built_in">sec</span>/qn.json <span class="keyword">or</span> C:</div><div class="line">     ...</div></pre></td></tr></table></figure>
</li>
<li><p>执行<code>hexo qiniu s</code>同步上传</p>
</li>
</ol>
<hr>
<h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><ul>
<li><a href="http://www.jianshu.com/p/380290deb8f0" target="_blank" rel="external">免费个人博客搭建详解</a></li>
<li><a href="http://div.io/topic/1691" target="_blank" rel="external">手把手教你使用Hexo + Github Pages搭建个人独立博客</a></li>
<li><a href="http://moxfive.coding.me/yelee/" target="_blank" rel="external">Yelee —— 简而不减 Hexo 双栏博客主题</a></li>
<li><a href="http://www.netcan666.com/2015/11/22/%E8%A7%A3%E5%86%B3Hexo%E7%BD%AE%E9%A1%B6%E9%97%AE%E9%A2%98/" target="_blank" rel="external">解决Hexo置顶问题</a></li>
</ul>
<hr>
<h1 id="遇到的问题："><a href="#遇到的问题：" class="headerlink" title="遇到的问题："></a>遇到的问题：</h1><ol>
<li><p>使用hexo d之后直接输入<code>https://用户名.github.io</code>显示404<br>答： 没有配置deploy的type和repo</p>
</li>
<li><p>更改以前的文章内容，使用hexo clean、hexo g、hexo d没有用，而且localhost:4000也一样<br>答： 因为修改的文件不是_post里面的文件…(╯‵□′)╯︵┻━┻z<br>反思： 要细心阿！！！</p>
</li>
<li><p>编辑输入时替换后一格内容【这个不在hexo配置范畴内】<br>答：按下<code>Insert</code>键试试？</p>
</li>
<li><p>关于markdown的有序列表一点小问题。编辑的时候应该为子项内容缩进一格，否则如果当子项内容长时该子项后面的子项序号会重新从1开始。</p>
</li>
<li><p>markdown表格？似乎没有被渲染成表格。</p>
 <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">|<span class="string"> column </span>|<span class="string"> column </span>|</div><div class="line">|<span class="string">--------</span>|<span class="string">--------</span>|</div><div class="line">|<span class="string">        </span>|<span class="string">        </span>|</div></pre></td></tr></table></figure>
<p> 因为被浏览器（Chrome）检测为不安全脚本了<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
